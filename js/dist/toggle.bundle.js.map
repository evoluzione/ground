{"version":3,"file":"toggle.bundle.js","mappings":"oUAIA,IAAMA,EAAYC,EAAQ,KAELC,EAAAA,WAKpB,WAAYC,EAASC,I,4FAAS,SAC7BC,KAAKF,QAAUA,GAAW,aAC1BE,KAAKC,SAAW,CACfC,SAAUF,KAAKF,QACfK,gBAAiB,aAElBH,KAAKI,IAAM,CACVC,KAAMC,SAASC,gBACfC,KAAMF,SAASE,MAEhBR,KAAKD,QAAUA,EAAUJ,EAAUK,KAAKC,SAAUF,GAAWC,KAAKC,SAClED,KAAKS,aAAeT,KAAKS,aAAaC,KAAKV,MAC3CA,KAAKW,OAASX,KAAKW,OAAOD,KAAKV,MAG9BA,KAAKY,OACLZ,KAAKa,WAAWb,KAAKD,QAAQG,WAC7BY,EAAAA,EAAAA,GAAad,KAAKD,QAAQG,SAAUF,KAAKS,c,yCAI3C,WACCT,KAAKI,IAAIN,QAAUQ,SAASS,iBAAiBf,KAAKF,W,wBAOnD,SAAWI,GAEV,IADA,IAAMc,EAAWV,SAASS,iBAAiBb,GAClCe,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACpCD,EAASC,GAAGE,iBAAiB,QAASnB,KAAKW,U,0BAQ7C,SAAaS,GACZpB,KAAKY,OACLQ,EAAOD,iBAAiB,QAASnB,KAAKW,U,oBAOvC,SAAOU,GAGN,GAFArB,KAAKI,IAAIN,QAAUQ,SAASS,iBAAiBf,KAAKF,SAElB,IAA5BE,KAAKI,IAAIN,QAAQoB,OAArB,CAIA,IAAMI,EAASD,EAAME,cACrB,GAAID,EAYH,GAVKA,EAAOE,aAAa,gCACxBH,EAAMI,iBAIHH,EAAOE,aAAa,4BACvBxB,KAAKD,QAAQI,gBAAkBmB,EAAOI,QAAQvB,iBAI3CmB,EAAOE,aAAa,sBAGvB,IAFA,IAAMG,EAAaL,EAAOI,QAAQE,aAAaC,MAAM,KAE5CZ,EAAI,EAAGA,EAAIU,EAAWT,OAAQD,IAGtC,IAFA,IAAMG,EAASd,SAASS,iBAAiBY,EAAWV,IAE3Ca,EAAK,EAAGA,EAAKV,EAAOF,OAAQY,IACpCV,EAAOU,GAAIC,UAAUpB,OAAOX,KAAKD,QAAQI,sBAI3CmB,EAAOS,UAAUpB,OAAOX,KAAKD,QAAQI,uB,sEArFpBN,I,8hCCCd,SAASiB,EAAaZ,EAAU8B,GAiDrB,IAAIC,kBAbI,SAACC,IAnCH,SAACC,EAAUD,GAEjC,IAFmD,E,EAE7CE,EAAS,IAAIC,IAFgC,IAItBH,GAJsB,IAInD,2BAA4C,mBAA/BI,YAA+B,IAC3C,2BAA+B,KAApBC,EAAoB,QAI9B,GAAsB,IAAlBA,EAAKC,SAAgB,CAEpBD,EAAKE,QAAQN,IAChBC,EAAOM,IAAIH,GAHY,UAMJA,EAAKxB,iBAAiBoB,IANlB,IAMxB,2BAAqD,KAA1CQ,EAA0C,QACpDP,EAAOM,IAAIC,IAPY,iCALiB,gCAJO,8BAgCnD,O,+CAAWP,I,sSAIIQ,CAAe1C,EAAUgC,GACjCW,SAAQ,SAAC/C,GACfkC,EAASlC,SAWFgD,QAAQxC,SAASC,gBAPX,CACdwC,WAAW,EACXC,YAAY,EACZC,eAAe,EACfC,SAAS,I","sources":["webpack://ground/./js/src/components/toggle.js","webpack://ground/./js/src/utilities/observer.js"],"sourcesContent":["/**\n * Toggle module\n */\nimport { initObserver } from '../utilities/observer';\nconst Deepmerge = require('deepmerge');\n\nexport default class Toggle {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element || '.js-toggle';\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element,\n\t\t\ttoggleClassName: 'is-active'\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? Deepmerge(this.defaults, options) : this.defaults;\n\t\tthis.updateEvents = this.updateEvents.bind(this);\n\t\tthis.toggle = this.toggle.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {\n\t\t\tthis.init();\n\t\t\tthis.initEvents(this.options.triggers);\n\t\t\tinitObserver(this.options.triggers, this.updateEvents);\n\t\t// });\n\t}\n\n\tinit() {\n\t\tthis.DOM.element = document.querySelectorAll(this.element);\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tconst elements = document.querySelectorAll(triggers);\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\telements[i].addEventListener('click', this.toggle);\n\t\t}\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\ttarget.addEventListener('click', this.toggle);\n\t}\n\n\t/**\n\t * Toggle classes\n\t * @param {Object} event\n\t */\n\ttoggle(event) {\n\t\tthis.DOM.element = document.querySelectorAll(this.element);\n\n\t\tif (this.DOM.element.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst curent = event.currentTarget;\n\t\tif (curent) {\n\t\t\t// Add data-toggle-prevent-default=\"false\" to restore default behaviour\n\t\t\tif (!curent.hasAttribute('data-toggle-prevent-default')) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\t// Add data-toggle-class-name=\"customclass\" to change the default class name\n\t\t\tif (curent.hasAttribute('data-toggle-class-name')) {\n\t\t\t\tthis.options.toggleClassName = curent.dataset.toggleClassName;\n\t\t\t}\n\n\t\t\t// Add data-toggle-target=\".selector1 #selector2\" to toggle different target\n\t\t\tif (curent.hasAttribute('data-toggle-target')) {\n\t\t\t\tconst targetList = curent.dataset.toggleTarget.split(' ');\n\n\t\t\t\tfor (let i = 0; i < targetList.length; i++) {\n\t\t\t\t\tconst target = document.querySelectorAll(targetList[i]);\n\n\t\t\t\t\tfor (let ib = 0; ib < target.length; ib++) {\n\t\t\t\t\t\ttarget[ib].classList.toggle(this.options.toggleClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurent.classList.toggle(this.options.toggleClassName);\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * Observe DOM Node Changes\n * @param {string} triggers - Selectors\n * @param {requestCallback} cb - The callback that handles the response.\n *\n * @see https://stackoverflow.com/questions/56608748/how-to-use-queryselectorall-on-the-added-nodes-in-a-mutationobserver\n */\nexport function initObserver(triggers, callback) {\n\tconst filterSelector = (selector, mutationsList) => {\n\t\t// We can't create a NodeList; let's use a Set\n\t\tconst result = new Set();\n\t\t// Loop through the mutationsList...\n\t\tfor (const { addedNodes } of mutationsList) {\n\t\t\tfor (const node of addedNodes) {\n\t\t\t\t// console.log(node);\n\n\t\t\t\t// If it's an element...\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\t// Add it if it's a match\n\t\t\t\t\tif (node.matches(selector)) {\n\t\t\t\t\t\tresult.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tfor (const entry of node.querySelectorAll(selector)) {\n\t\t\t\t\t\tresult.add(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* mutationsList.map((e) => e.addedNodes).forEach((n) => {\n\t\t\t\tif (n.nodeType === 1) {\n\t\t\t\t\tif (n.matches(selector)) {\n\t\t\t\t\t\tresult.add(n);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tn.querySelectorAll(selector).forEach((c) => result.add(c));\n\t\t\t\t}\n\t\t\t}); */\n\n\t\treturn [...result]; // Result is an array, or just return the set\n\t};\n\n\tconst observerCallback = (mutationsList) => {\n\t\tconst result = filterSelector(triggers, mutationsList);\n\t\tresult.forEach((element) => {\n\t\t\tcallback(element);\n\t\t});\n\t};\n\n\tconst config = {\n\t\tchildList: true,\n\t\tattributes: false,\n\t\tcharacterData: false,\n\t\tsubtree: true\n\t};\n\tconst observer = new MutationObserver(observerCallback);\n\tobserver.observe(document.documentElement, config);\n\t//observer.disconnect();\n}\n"],"names":["Deepmerge","require","Toggle","element","options","this","defaults","triggers","toggleClassName","DOM","html","document","documentElement","body","updateEvents","bind","toggle","init","initEvents","initObserver","querySelectorAll","elements","i","length","addEventListener","target","event","curent","currentTarget","hasAttribute","preventDefault","dataset","targetList","toggleTarget","split","ib","classList","callback","MutationObserver","mutationsList","selector","result","Set","addedNodes","node","nodeType","matches","add","entry","filterSelector","forEach","observe","childList","attributes","characterData","subtree"],"sourceRoot":""}
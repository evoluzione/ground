{"version":3,"file":"animationAll.bundle.js","mappings":"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","sources":["webpack://ground/./js/src/animations/animationAll.js","webpack://ground/./js/src/utilities/observer.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport * as deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { SplitText } from 'gsap/SplitText';\nimport { DrawSVGPlugin } from 'gsap/DrawSVGPlugin';\nimport { MorphSVGPlugin } from 'gsap/MorphSVGPlugin';\n\ngsap.registerPlugin(ScrollTrigger, SplitText, DrawSVGPlugin, MorphSVGPlugin);\n\nexport default class AnimationsAll {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element || '[data-scroll]';\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\tthis.updateEvents = this.updateEvents.bind(this);\n\n\t\twindow.addEventListener('DOMContentLoaded', () => {});\n\n\t\tScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\tScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\tScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\tScrollTrigger.addEventListener('refresh', () => {});\n\n\t\twindow.addEventListener('NAVIGATE_OUT', () => {\n\t\t\t// ScrollTrigger.update();\n\t\t\t// ScrollTrigger.refresh();\n\t\t});\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\t// ScrollTrigger.update();\n\t\t\t// ScrollTrigger.refresh();\n\t\t});\n\n\t\twindow.addEventListener('NAVIGATE_IN', () => {});\n\n\t\twindow.addEventListener('NAVIGATE_END', () => {});\n\n\t\tif (document.readyState !== \"loading\"){\n\t\t\t\n\t\t\tthis.init();\n\t\t\tthis.initEvents(this.options.triggers);\n\t\t\tinitObserver(this.options.triggers, this.updateEvents);\n\n\t\t} else{\n\t\t\twindow.addEventListener('LOADER_COMPLETE', () => {\n\t\t\t\tthis.init();\n\t\t\t\tthis.initEvents(this.options.triggers);\n\t\t\t\tinitObserver(this.options.triggers, this.updateEvents);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = document.querySelectorAll(this.element);\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\t// ScrollTrigger.defaults({\n\t\t// \tmarkers: false,\n\t\t// \tease: 'power3',\n\t\t// })\n\n\t\tgsap.utils.toArray(triggers).forEach((element) => {\n\t\t\tif (element.dataset.scroll === 'js-split-text') {\n\t\t\t\tthis.animationSplitText(element);\n\t\t\t} else if (element.dataset.scroll === 'js-rotation') {\n\t\t\t\tthis.animationRotation(element);\n\t\t\t} else if (element.dataset.scroll === 'js-batch') {\n\t\t\t\tthis.animationBatch(element);\n\t\t\t} else if (element.dataset.scroll === 'js-scale') {\n\t\t\t\tthis.animationScale(element);\n\t\t\t} else if (element.dataset.scroll === 'js-draw') {\n\t\t\t\tthis.animationDraw(element);\n\t\t\t} else if (element.dataset.scroll === 'js-bg-color') {\n\t\t\t\tthis.animationChangeBgColor(element);\n\t\t\t} else if (element.dataset.scroll === 'js-pin') {\n\t\t\t\tthis.animationPin(element);\n\t\t\t} else if (element.dataset.scroll === 'js-sprite-images') {\n\t\t\t\tthis.animationSpriteImages(element);\n\t\t\t} else if (element.dataset.scroll === 'js-horizontal-scroll') {\n\t\t\t\tthis.animationHorizontalScroll(element);\n\t\t\t} else if (element.dataset.scroll === 'js-horizontal-scroll-container') {\n\t\t\t\tthis.animationHorizontalScrollContainer(element);\n\t\t\t} else if (element.dataset.scroll === 'js-horizontal-scroll-section') {\n\t\t\t\tthis.animationHorizontalScrollSection(element);\n\t\t\t} else if (element.dataset.scroll === 'js-comparison') {\n\t\t\t\tthis.animationComparison(element);\n\t\t\t} else if (element.dataset.scroll === 'js-parallax') {\n\t\t\t\tthis.animationParallax(element);\n\t\t\t} else if (element.dataset.scroll === 'js-video') {\n\t\t\t\tthis.animationVideo(element);\n\t\t\t} else {\n\t\t\t\tthis.animationDefault(element);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\t// console.log(target.dataset.scroll);\n\n\t\tsetTimeout(() => {\n\t\t\tif (target.dataset.scroll === 'js-split-text') {\n\t\t\t\tthis.animationSplitText(target);\n\t\t\t} else if (target.dataset.scroll === 'js-rotation') {\n\t\t\t\tthis.animationRotation(target);\n\t\t\t} else if (target.dataset.scroll === 'js-batch') {\n\t\t\t\tthis.animationBatch(target);\n\t\t\t} else if (target.dataset.scroll === 'js-scale') {\n\t\t\t\tthis.animationScale(target);\n\t\t\t} else if (target.dataset.scroll === 'js-draw') {\n\t\t\t\tthis.animationDraw(target);\n\t\t\t} else if (target.dataset.scroll === 'js-bg-color') {\n\t\t\t\tthis.animationChangeBgColor(target);\n\t\t\t} else if (target.dataset.scroll === 'js-pin') {\n\t\t\t\tthis.animationPin(target);\n\t\t\t} else if (target.dataset.scroll === 'js-sprite-images') {\n\t\t\t\tthis.animationSpriteImages(target);\n\t\t\t} else if (target.dataset.scroll === 'js-horizontal-scroll') {\n\t\t\t\tthis.animationHorizontalScroll(target);\n\t\t\t} else if (target.dataset.scroll === 'js-horizontal-scroll-container') {\n\t\t\t\tthis.animationHorizontalScrollContainer(target);\n\t\t\t} else if (target.dataset.scroll === 'js-horizontal-scroll-section') {\n\t\t\t\tthis.animationHorizontalScrollSection(target);\n\t\t\t} else if (target.dataset.scroll === 'js-comparison') {\n\t\t\t\tthis.animationComparison(target);\n\t\t\t} else if (target.dataset.scroll === 'js-parallax') {\n\t\t\t\tthis.animationParallax(target);\n\t\t\t} else if (target.dataset.scroll === 'js-video') {\n\t\t\t\tthis.animationVideo(target);\n\t\t\t} else {\n\t\t\t\tthis.animationDefault(target);\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * default Animation\n\t */\n\tanimationDefault(item) {\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none'\n\t\t\t// markers: true,\n\t\t\t// once: true,\n\t\t});\n\t}\n\n\t/**\n\t * splitText Animation\n\t */\n\tanimationSplitText(item) {\n\t\tgsap.set(item, { autoAlpha: 1 });\n\t\tconst targetSplitBy = item.dataset.scrollSplittext;\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tstart: 'top 90%',\n\t\t\t\tend: 'bottom 60%',\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\t// markers: true,\n\t\t\t\ttoggleActions: 'play none play reset'\n\t\t\t}\n\t\t});\n\n\t\tif (targetSplitBy === 'chars') {\n\t\t\tconst itemSplitted = new SplitText(item, { type: 'chars' });\n\t\t\ttl.from(itemSplitted.chars, {\n\t\t\t\tyPercent: 100,\n\t\t\t\topacity: 0,\n\t\t\t\tstagger: 0.05,\n\t\t\t\tduration: 0.5,\n\t\t\t\tease: 'back.inOut'\n\t\t\t});\n\t\t}\n\n\t\tif (targetSplitBy === 'words') {\n\t\t\tconst itemSplitted = new SplitText(item, { type: 'words' });\n\t\t\ttl.from(itemSplitted.words, {\n\t\t\t\tyPercent: 100,\n\t\t\t\topacity: 0,\n\t\t\t\tstagger: 0.05,\n\t\t\t\tduration: 0.5,\n\t\t\t\tease: 'back.inOut'\n\t\t\t});\n\t\t}\n\n\t\tif (targetSplitBy === 'lines') {\n\t\t\tconst itemSplitted = new SplitText(item, { type: 'lines' });\n\t\t\ttl.from(itemSplitted.lines, { y: 20, opacity: 0, stagger: 0.01, duration: 0.01, ease: 'back.inOut' });\n\t\t}\n\t}\n\n\t/**\n\t * rotation Animation\n\t */\n\tanimationRotation(item) {\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tstart: 'top 90%',\n\t\t\t\tend: 'bottom 80%',\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\ttoggleActions: 'play none play reverse'\n\t\t\t}\n\t\t});\n\n\t\ttl.from(item, {\n\t\t\tx: 400,\n\t\t\trotation: 360\n\t\t});\n\t}\n\n\t/**\n\t * batch Animation\n\t */\n\tanimationBatch(item) {\n\t\tconst target = item.querySelectorAll('[data-scroll-target]');\n\n\t\t// gsap.set(target, { y: 100, opacity: 0 });\n\n\t\tScrollTrigger.batch(target, {\n\t\t\tinterval: 0.1, // time window (in seconds) for batching to occur.\n\t\t\tbatchMax: 3, // maximum batch size (targets)\n\t\t\tonEnter: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeave: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true }),\n\t\t\tonEnterBack: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeaveBack: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true })\n\t\t});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () =>\n\t\t// \tgsap.set(target, { y: 0 })\n\t\t// )\n\t}\n\n\t/**\n\t * scale Animation\n\t */\n\tanimationScale(item) {\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tstart: 'top 100%',\n\t\t\t\tend: 'bottom 0%',\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\ttoggleActions: 'play none play reverse'\n\t\t\t}\n\t\t});\n\n\t\ttl.to(item, {\n\t\t\tscale: 1.5\n\t\t});\n\t}\n\n\t/**\n\t * parallax Animation\n\t */\n\tanimationParallax(item) {\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\ttoggleActions: 'play pause none none',\n\t\t\t\tscrub: targetScrub || 2\n\t\t\t}\n\t\t});\n\n\t\ttl.to(item, {\n\t\t\ty: -item.dataset.scrollSpeedY * 100 || 0,\n\t\t\tx: -item.dataset.scrollSpeedX * 100 || 0\n\t\t});\n\t}\n\n\t/**\n\t * video Animation\n\t */\n\tanimationVideo(item) {\n\t\tconst targetVideo = item.querySelector('[data-scroll-target]');\n\n\t\tgsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tstart: 'top bottom',\n\t\t\t\tend: 'bottom top',\n\t\t\t\tmarkers: false,\n\t\t\t\tonEnter: () => targetVideo.play(),\n\t\t\t\tonLeave: () => {\n\t\t\t\t\ttargetVideo.pause();\n\t\t\t\t\ttargetVideo.currentTime = 0;\n\t\t\t\t},\n\t\t\t\tonEnterBack: () => targetVideo.play(),\n\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\ttargetVideo.pause();\n\t\t\t\t\ttargetVideo.currentTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * darwSvg Animation\n\t */\n\tanimationDraw(item) {\n\t\tconst target = item.querySelectorAll('path');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\ttoggleActions: 'play none none none'\n\t\t\t}\n\t\t});\n\n\t\ttl.from(target, {\n\t\t\tdrawSVG: 0\n\t\t});\n\t}\n\n\t/**\n\t * backgroundColor Animation\n\t */\n\tanimationChangeBgColor(item) {\n\t\tconst target = document.body;\n\t\tconst targetColor = item.dataset.scrollBgcolor;\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tscrub: 1,\n\t\t\t\ttoggleActions: 'play reset play reset'\n\t\t\t}\n\t\t});\n\n\t\ttl.to(target, {\n\t\t\tbackgroundColor: targetColor,\n\t\t\tease: 'power1'\n\t\t});\n\t}\n\n\t/**\n\t * pin Animation\n\t */\n\tanimationPin(item) {\n\t\tconst target = item.querySelectorAll('[data-scroll-target]');\n\t\tconst targetElement = item.querySelectorAll('[data-scroll-target-animate]');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tstart: 'center center',\n\t\t\t\t// end: '+=200%',\n\t\t\t\t// toggleClass: 'active',\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tanticipatePin: 1\n\t\t\t}\n\t\t});\n\n\t\ttl.from(targetElement, {\n\t\t\tscale: 0.6,\n\t\t\ttransformOrigin: 'center center'\n\t\t});\n\t}\n\n\t/**\n\t * pin Image Sequence https://codepen.io/GreenSock/pen/yLOVJxd\n\t */\n\tanimationSpriteImages(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst canvas = item.querySelector('[data-scroll-canvas]');\n\t\tconst targetContainer = item.querySelector('[data-scroll-target-animate]');\n\t\tconst context = canvas.getContext('2d');\n\t\tconst frameCount = parseInt(item.dataset.scrollFrames, 10);\n\t\tconst framePath = item.dataset.scrollPath;\n\n\t\tcanvas.width = 900;\n\t\tcanvas.height = 859;\n\n\t\tconst currentFrame = (index) => `${framePath}/${(index + 1).toString().padStart(4, '0')}.jpg`;\n\t\t// `https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/01-hero-lightpass/${(index + 1).toString().padStart(4, '0')}.jpg`\n\n\t\tconst images = [];\n\t\tconst frames = {\n\t\t\tframe: 0\n\t\t};\n\n\t\tfor (let i = 0; i < frameCount; i++) {\n\t\t\tconst img = new Image();\n\t\t\timg.src = currentFrame(i);\n\t\t\timages.push(img);\n\t\t}\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: '+=400%',\n\t\t\t\tscrub: 0.5,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tanticipatePin: 1\n\t\t\t}\n\t\t});\n\n\t\ttl.to(\n\t\t\tframes,\n\t\t\t{\n\t\t\t\tframe: frameCount - 1,\n\t\t\t\tsnap: 'frame',\n\t\t\t\tonUpdate: render,\n\t\t\t\tduration: 20\n\t\t\t},\n\t\t\t'together'\n\t\t).fromTo(targetContainer, { scale: 0.95 }, { scale: 1, duration: 20 }, 'together');\n\n\t\timages[0].onload = render;\n\n\t\tfunction render() {\n\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t\t\tcontext.drawImage(images[frames.frame], 0, 0);\n\t\t}\n\t}\n\n\t/**\n\t * pin Horizontal Animation\n\t */\n\tanimationHorizontalScroll(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst targetContainer = item.querySelector('[data-scroll-target-animate]');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tgsap.to(targetContainer, {\n\t\t\tx: () => -targetContainer.getBoundingClientRect().width + target.getBoundingClientRect().width,\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: () => '+=' + targetContainer.offsetWidth,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tanticipatePin: 1,\n\t\t\t\tscrub: targetScrub || false\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * pin Horizontal Container Animation\n\t */\n\tanimationHorizontalScrollContainer(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst panel = item.querySelectorAll('[data-scroll-panel]');\n\t\tconst targetScrub = item.dataset.scrollScrub;\n\n\t\tconsole.log(targetScrub);\n\n\t\tlet sections = gsap.utils.toArray(panel);\n\n\t\tlet scrollTween = gsap.to(sections, {\n\t\t\txPercent: -100 * (sections.length - 1),\n\t\t\tease: 'none', // <-- IMPORTANT!\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tpin: true,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\t//snap: directionalSnap(1 / (sections.length - 1)),\n\t\t\t\tend: '+=3000'\n\t\t\t}\n\t\t});\n\n\t\tgsap.to('.js-box-1', {\n\t\t\ty: -130,\n\t\t\tduration: 2,\n\t\t\tease: 'elastic',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: '.js-box-1',\n\t\t\t\tcontainerAnimation: scrollTween,\n\t\t\t\tstart: 'left center',\n\t\t\t\ttoggleActions: 'play none play reverse'\n\t\t\t\t// markers: true,\n\t\t\t}\n\t\t});\n\n\t\tgsap.to('.js-box-2', {\n\t\t\ty: 320,\n\t\t\tbackgroundColor: 'red',\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: '.js-box-2',\n\t\t\t\tcontainerAnimation: scrollTween,\n\t\t\t\tstart: 'center 80%',\n\t\t\t\tend: 'center 20%',\n\t\t\t\tscrub: 2\n\t\t\t\t// markers: true\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * pin Horizontal Section Animation\n\t */\n\tanimationHorizontalScrollSection(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst section = item.querySelectorAll('[data-scroll-section]');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst sections = gsap.utils.toArray(section);\n\n\t\tlet maxWidth = 0;\n\n\t\tconst getMaxWidth = () => {\n\t\t\tmaxWidth = 0;\n\t\t\tsections.forEach((section) => {\n\t\t\t\tmaxWidth += section.offsetWidth;\n\t\t\t});\n\t\t};\n\t\tgetMaxWidth();\n\t\tScrollTrigger.addEventListener('refreshInit', getMaxWidth);\n\n\t\tgsap.to(sections, {\n\t\t\tx: () => `-${maxWidth - window.innerWidth}`,\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: () => `+=${maxWidth}`,\n\t\t\t\tinvalidateOnRefresh: true\n\t\t\t}\n\t\t});\n\n\t\t// ADD SKEW\n\t\t// let proxy = { skew: 0 },\n\t\t// \tskewSetter = gsap.quickSetter(section, 'skewX', 'deg'), // fast\n\t\t// \tclamp = gsap.utils.clamp(-10, 10) // don't let the skew go beyond [X] degrees.\n\t\t// END SKEW\n\n\t\tsections.forEach((sct, i) => {\n\t\t\tScrollTrigger.create({\n\t\t\t\ttrigger: sct,\n\t\t\t\tstart: () =>\n\t\t\t\t\t'top top-=' +\n\t\t\t\t\t(sct.offsetLeft - window.innerWidth / 2) * (maxWidth / (maxWidth - window.innerWidth)),\n\t\t\t\tend: () => '+=' + sct.offsetWidth * (maxWidth / (maxWidth - window.innerWidth)),\n\t\t\t\ttoggleClass: { targets: sct, className: 'active' }\n\t\t\t\t// ADD SKEW\n\t\t\t\t// onUpdate: (self) => {\n\t\t\t\t// \tlet skew = clamp(self.getVelocity() / -500)\n\t\t\t\t// \t// only do something if the skew is MORE severe. Remember, we're always tweening back to 0, so if the user slows their scrolling quickly, it's more natural to just let the tween handle that smoothly rather than jumping to the smaller skew.\n\t\t\t\t// \tif (Math.abs(skew) > Math.abs(proxy.skew)) {\n\t\t\t\t// \t\tproxy.skew = skew\n\t\t\t\t// \t\tgsap.to(proxy, {\n\t\t\t\t// \t\t\tskew: 0,\n\t\t\t\t// \t\t\tduration: 0.5,\n\t\t\t\t// \t\t\tease: 'circ',\n\t\t\t\t// \t\t\toverwrite: true,\n\t\t\t\t// \t\t\tonUpdate: () => skewSetter(proxy.skew),\n\t\t\t\t// \t\t})\n\t\t\t\t// \t}\n\t\t\t\t// },\n\t\t\t\t// END SKEW\n\t\t\t});\n\t\t});\n\n\t\t// SKEW: make the right edge \"stick\" to the scroll bar. force3D: true improves performance\n\t\t// gsap.set(section, { transformOrigin: 'center center', force3D: true })\n\t\t// END SKEW\n\t}\n\n\t/**\n\t * comparison Animation\n\t */\n\tanimationComparison(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst targetMedia = item.querySelectorAll('[data-scroll-target-media]');\n\t\tconst targetImage = item.querySelectorAll('[data-scroll-target-media] img');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: () => `+=${target.offsetWidth}`,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tanticipatePin: 1\n\t\t\t},\n\t\t\tdefaults: { ease: 'none' }\n\t\t});\n\n\t\ttl.fromTo(targetMedia, { xPercent: 100, x: 0 }, { xPercent: 0 }).fromTo(\n\t\t\ttargetImage,\n\t\t\t{ xPercent: -100, x: 0 },\n\t\t\t{ xPercent: 0 },\n\t\t\t0\n\t\t);\n\t}\n}\n","/**\n * Observe DOM Node Changes\n * @param {string} triggers - Selectors\n * @param {requestCallback} cb - The callback that handles the response.\n *\n * @see https://stackoverflow.com/questions/56608748/how-to-use-queryselectorall-on-the-added-nodes-in-a-mutationobserver\n */\nexport function initObserver(triggers, callback) {\n\tconst filterSelector = (selector, mutationsList) => {\n\t\t// We can't create a NodeList; let's use a Set\n\t\tconst result = new Set();\n\t\t// Loop through the mutationsList...\n\t\tfor (const { addedNodes } of mutationsList) {\n\t\t\tfor (const node of addedNodes) {\n\t\t\t\t// console.log(node);\n\n\t\t\t\t// If it's an element...\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\t// Add it if it's a match\n\t\t\t\t\tif (node.matches(selector)) {\n\t\t\t\t\t\tresult.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tfor (const entry of node.querySelectorAll(selector)) {\n\t\t\t\t\t\tresult.add(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* mutationsList.map((e) => e.addedNodes).forEach((n) => {\n\t\t\t\tif (n.nodeType === 1) {\n\t\t\t\t\tif (n.matches(selector)) {\n\t\t\t\t\t\tresult.add(n);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tn.querySelectorAll(selector).forEach((c) => result.add(c));\n\t\t\t\t}\n\t\t\t}); */\n\n\t\treturn [...result]; // Result is an array, or just return the set\n\t};\n\n\tconst observerCallback = (mutationsList) => {\n\t\tconst result = filterSelector(triggers, mutationsList);\n\t\tresult.forEach((element) => {\n\t\t\tcallback(element);\n\t\t});\n\t};\n\n\tconst config = {\n\t\tchildList: true,\n\t\tattributes: false,\n\t\tcharacterData: false,\n\t\tsubtree: true\n\t};\n\tconst observer = new MutationObserver(observerCallback);\n\tobserver.observe(document.documentElement, config);\n\t//observer.disconnect();\n}\n"],"names":["gsap","ScrollTrigger","SplitText","DrawSVGPlugin","MorphSVGPlugin","AnimationsAll","element","options","this","defaults","triggers","DOM","html","document","documentElement","body","deepmerge","updateEvents","bind","window","addEventListener","readyState","init","initEvents","initObserver","querySelectorAll","forEach","dataset","scroll","animationSplitText","animationRotation","animationBatch","animationScale","animationDraw","animationChangeBgColor","animationPin","animationSpriteImages","animationHorizontalScroll","animationHorizontalScrollContainer","animationHorizontalScrollSection","animationComparison","animationParallax","animationVideo","animationDefault","target","setTimeout","item","targetClass","trigger","start","toggleClass","toggleActions","autoAlpha","targetSplitBy","scrollSplittext","targetScrub","parseInt","scrollScrub","tl","scrollTrigger","end","scrub","itemSplitted","type","from","chars","yPercent","opacity","stagger","duration","ease","words","lines","y","x","rotation","interval","batchMax","onEnter","batch","overwrite","onLeave","onEnterBack","onLeaveBack","to","scale","scrollSpeedY","scrollSpeedX","targetVideo","querySelector","markers","play","pause","currentTime","drawSVG","targetColor","scrollBgcolor","backgroundColor","targetElement","pin","pinReparent","anticipatePin","transformOrigin","canvas","targetContainer","context","getContext","frameCount","scrollFrames","framePath","scrollPath","width","height","index","images","frames","frame","i","img","Image","src","toString","padStart","push","render","clearRect","drawImage","snap","onUpdate","fromTo","onload","getBoundingClientRect","invalidateOnRefresh","offsetWidth","panel","console","log","sections","scrollTween","xPercent","length","containerAnimation","section","maxWidth","getMaxWidth","innerWidth","sct","offsetLeft","targets","className","targetMedia","targetImage","callback","MutationObserver","mutationsList","selector","result","Set","addedNodes","node","nodeType","matches","add","entry","filterSelector","observe","childList","attributes","characterData","subtree"],"sourceRoot":""}
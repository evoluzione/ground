{"version":3,"file":"521.bundle.js","mappings":"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","sources":["webpack://ground/./node_modules/gsap/DrawSVGPlugin.js","webpack://ground/./node_modules/gsap/utils/paths.js","webpack://ground/./node_modules/gsap/MorphSVGPlugin.js","webpack://ground/./node_modules/gsap/utils/strings.js","webpack://ground/./node_modules/gsap/SplitText.js"],"sourcesContent":["/*!\n * DrawSVGPlugin 3.9.1\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _toArray,\n    _doc,\n    _win,\n    _isEdge,\n    _coreInitted,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_types = {\n  rect: [\"width\", \"height\"],\n  circle: [\"r\", \"r\"],\n  ellipse: [\"rx\", \"ry\"],\n  line: [\"x2\", \"y2\"]\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _parseNum = function _parseNum(value) {\n  return parseFloat(value) || 0;\n},\n    _parseSingleVal = function _parseSingleVal(value, length) {\n  var num = _parseNum(value);\n\n  return ~value.indexOf(\"%\") ? num / 100 * length : num;\n},\n    _getAttributeAsNumber = function _getAttributeAsNumber(target, attr) {\n  return _parseNum(target.getAttribute(attr));\n},\n    _sqrt = Math.sqrt,\n    _getDistance = function _getDistance(x1, y1, x2, y2, scaleX, scaleY) {\n  return _sqrt(Math.pow((_parseNum(x2) - _parseNum(x1)) * scaleX, 2) + Math.pow((_parseNum(y2) - _parseNum(y1)) * scaleY, 2));\n},\n    _warn = function _warn(message) {\n  return console.warn(message);\n},\n    _hasNonScalingStroke = function _hasNonScalingStroke(target) {\n  return target.getAttribute(\"vector-effect\") === \"non-scaling-stroke\";\n},\n    _bonusValidated = 1,\n    //<name>DrawSVGPlugin</name>\n//accepts values like \"100%\" or \"20% 80%\" or \"20 50\" and parses it into an absolute start and end position on the line/stroke based on its length. Returns an an array with the start and end values, like [0, 243]\n_parse = function _parse(value, length, defaultStart) {\n  var i = value.indexOf(\" \"),\n      s,\n      e;\n\n  if (i < 0) {\n    s = defaultStart !== undefined ? defaultStart + \"\" : value;\n    e = value;\n  } else {\n    s = value.substr(0, i);\n    e = value.substr(i + 1);\n  }\n\n  s = _parseSingleVal(s, length);\n  e = _parseSingleVal(e, length);\n  return s > e ? [e, s] : [s, e];\n},\n    _getLength = function _getLength(target) {\n  target = _toArray(target)[0];\n\n  if (!target) {\n    return 0;\n  }\n\n  var type = target.tagName.toLowerCase(),\n      style = target.style,\n      scaleX = 1,\n      scaleY = 1,\n      length,\n      bbox,\n      points,\n      prevPoint,\n      i,\n      rx,\n      ry;\n\n  if (_hasNonScalingStroke(target)) {\n    //non-scaling-stroke basically scales the shape and then strokes it at the screen-level (after transforms), thus we need to adjust the length accordingly.\n    scaleY = target.getScreenCTM();\n    scaleX = _sqrt(scaleY.a * scaleY.a + scaleY.b * scaleY.b);\n    scaleY = _sqrt(scaleY.d * scaleY.d + scaleY.c * scaleY.c);\n  }\n\n  try {\n    //IE bug: calling <path>.getTotalLength() locks the repaint area of the stroke to whatever its current dimensions are on that frame/tick. To work around that, we must call getBBox() to force IE to recalculate things.\n    bbox = target.getBBox(); //solely for fixing bug in IE - we don't actually use the bbox.\n  } catch (e) {\n    //firefox has a bug that throws an error if the element isn't visible.\n    _warn(\"Some browsers won't measure invisible elements (like display:none or masks inside defs).\");\n  }\n\n  var _ref = bbox || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n      x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height;\n\n  if ((!bbox || !width && !height) && _types[type]) {\n    //if the element isn't visible, try to discern width/height using its attributes.\n    width = _getAttributeAsNumber(target, _types[type][0]);\n    height = _getAttributeAsNumber(target, _types[type][1]);\n\n    if (type !== \"rect\" && type !== \"line\") {\n      //double the radius for circles and ellipses\n      width *= 2;\n      height *= 2;\n    }\n\n    if (type === \"line\") {\n      x = _getAttributeAsNumber(target, \"x1\");\n      y = _getAttributeAsNumber(target, \"y1\");\n      width = Math.abs(width - x);\n      height = Math.abs(height - y);\n    }\n  }\n\n  if (type === \"path\") {\n    prevPoint = style.strokeDasharray;\n    style.strokeDasharray = \"none\";\n    length = target.getTotalLength() || 0;\n    scaleX !== scaleY && _warn(\"Warning: <path> length cannot be measured when vector-effect is non-scaling-stroke and the element isn't proportionally scaled.\");\n    length *= (scaleX + scaleY) / 2;\n    style.strokeDasharray = prevPoint;\n  } else if (type === \"rect\") {\n    length = width * 2 * scaleX + height * 2 * scaleY;\n  } else if (type === \"line\") {\n    length = _getDistance(x, y, x + width, y + height, scaleX, scaleY);\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = target.getAttribute(\"points\").match(_numExp) || [];\n    type === \"polygon\" && points.push(points[0], points[1]);\n    length = 0;\n\n    for (i = 2; i < points.length; i += 2) {\n      length += _getDistance(points[i - 2], points[i - 1], points[i], points[i + 1], scaleX, scaleY) || 0;\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    rx = width / 2 * scaleX;\n    ry = height / 2 * scaleY;\n    length = Math.PI * (3 * (rx + ry) - _sqrt((3 * rx + ry) * (rx + 3 * ry)));\n  }\n\n  return length || 0;\n},\n    _getPosition = function _getPosition(target, length) {\n  target = _toArray(target)[0];\n\n  if (!target) {\n    return [0, 0];\n  }\n\n  length || (length = _getLength(target) + 1);\n\n  var cs = _win.getComputedStyle(target),\n      dash = cs.strokeDasharray || \"\",\n      offset = _parseNum(cs.strokeDashoffset),\n      i = dash.indexOf(\",\");\n\n  i < 0 && (i = dash.indexOf(\" \"));\n  dash = i < 0 ? length : _parseNum(dash.substr(0, i));\n  dash > length && (dash = length);\n  return [-offset || 0, dash - offset || 0];\n},\n    _initCore = function _initCore() {\n  if (_windowExists()) {\n    _doc = document;\n    _win = window;\n    _coreInitted = gsap = _getGSAP();\n    _toArray = gsap.utils.toArray;\n    _isEdge = ((_win.navigator || {}).userAgent || \"\").indexOf(\"Edge\") !== -1; //Microsoft Edge has a bug that causes it not to redraw the path correctly if the stroke-linecap is anything other than \"butt\" (like \"round\") and it doesn't match the stroke-linejoin. A way to trigger it is to change the stroke-miterlimit, so we'll only do that if/when we have to (to maximize performance)\n  }\n};\n\nexport var DrawSVGPlugin = {\n  version: \"3.9.1\",\n  name: \"drawSVG\",\n  register: function register(core) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    if (!target.getBBox) {\n      return false;\n    }\n\n    _coreInitted || _initCore();\n\n    var length = _getLength(target),\n        start,\n        end,\n        cs;\n\n    this._style = target.style;\n    this._target = target;\n\n    if (value + \"\" === \"true\") {\n      value = \"0 100%\";\n    } else if (!value) {\n      value = \"0 0\";\n    } else if ((value + \"\").indexOf(\" \") === -1) {\n      value = \"0 \" + value;\n    }\n\n    start = _getPosition(target, length);\n    end = _parse(value, length, start[0]);\n    this._length = _round(length);\n    this._dash = _round(start[1] - start[0]); //some browsers render artifacts if dash is 0, so we use a very small number in that case.\n\n    this._offset = _round(-start[0]);\n    this._dashPT = this.add(this, \"_dash\", this._dash, _round(end[1] - end[0]));\n    this._offsetPT = this.add(this, \"_offset\", this._offset, _round(-end[0]));\n\n    if (_isEdge) {\n      //to work around a bug in Microsoft Edge, animate the stroke-miterlimit by 0.0001 just to trigger the repaint (unnecessary if it's \"round\" and stroke-linejoin is also \"round\"). Imperceptible, relatively high-performance, and effective. Another option was to set the \"d\" <path> attribute to its current value on every tick, but that seems like it'd be much less performant.\n      cs = _win.getComputedStyle(target);\n\n      if (cs.strokeLinecap !== cs.strokeLinejoin) {\n        end = _parseNum(cs.strokeMiterlimit);\n        this.add(target.style, \"strokeMiterlimit\", end, end + 0.01);\n      }\n    }\n\n    this._live = _hasNonScalingStroke(target) || ~(value + \"\").indexOf(\"live\");\n    this._nowrap = ~(value + \"\").indexOf(\"nowrap\");\n\n    this._props.push(\"drawSVG\");\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var pt = data._pt,\n        style = data._style,\n        length,\n        lengthRatio,\n        dash,\n        offset;\n\n    if (pt) {\n      //when the element has vector-effect=\"non-scaling-stroke\" and the SVG is resized (like on a window resize), it actually changes the length of the stroke! So we must sense that and make the proper adjustments.\n      if (data._live) {\n        length = _getLength(data._target);\n\n        if (length !== data._length) {\n          lengthRatio = length / data._length;\n          data._length = length;\n\n          if (data._offsetPT) {\n            data._offsetPT.s *= lengthRatio;\n            data._offsetPT.c *= lengthRatio;\n          }\n\n          if (data._dashPT) {\n            data._dashPT.s *= lengthRatio;\n            data._dashPT.c *= lengthRatio;\n          } else {\n            data._dash *= lengthRatio;\n          }\n        }\n      }\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      dash = data._dash || ratio && ratio !== 1 && 0.0001 || 0; // only let it be zero if it's at the start or end of the tween.\n\n      length = data._length - dash + 0.1;\n      offset = data._offset;\n      dash && offset && dash + Math.abs(offset % data._length) > data._length - 0.2 && (offset += offset < 0 ? 0.1 : -0.1) && (length += 0.1);\n      style.strokeDashoffset = dash ? offset : offset + 0.001;\n      style.strokeDasharray = length < 0.2 ? \"none\" : dash ? dash + \"px,\" + (data._nowrap ? 999999 : length) + \"px\" : \"0px, 999999px\";\n    }\n  },\n  getLength: _getLength,\n  getPosition: _getPosition\n};\n_getGSAP() && gsap.registerPlugin(DrawSVGPlugin);\nexport { DrawSVGPlugin as default };","/*!\n * paths 3.9.1\n * https://greensock.com\n *\n * Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _numbersExp = /(?:(-)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n    _selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _DEG2RAD = Math.PI / 180,\n    _RAD2DEG = 180 / Math.PI,\n    _sin = Math.sin,\n    _cos = Math.cos,\n    _abs = Math.abs,\n    _sqrt = Math.sqrt,\n    _atan2 = Math.atan2,\n    _largeNum = 1e8,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _temp = {},\n    _temp2 = {},\n    _roundingNum = 1e5,\n    _wrapProgress = function _wrapProgress(progress) {\n  return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);\n},\n    //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.\n_round = function _round(value) {\n  return Math.round(value * _roundingNum) / _roundingNum || 0;\n},\n    _roundPrecise = function _roundPrecise(value) {\n  return Math.round(value * 1e10) / 1e10 || 0;\n},\n    _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {\n  var segment = rawPath[segIndex],\n      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);\n\n  if (shift && shift + i + 2 < segment.length) {\n    rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));\n    segment.splice(0, i + shift);\n    return 1;\n  }\n},\n    _getSampleIndex = function _getSampleIndex(samples, length, progress) {\n  // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;\n  var l = samples.length,\n      i = ~~(progress * l);\n\n  if (samples[i] > length) {\n    while (--i && samples[i] > length) {}\n  } else {\n    while (samples[++i] < length && i < l) {}\n  }\n\n  return i < l ? i : l - 1;\n},\n    _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {\n  var i = rawPath.length;\n  skipOuter || rawPath.reverse();\n\n  while (i--) {\n    rawPath[i].reversed || reverseSegment(rawPath[i]);\n  }\n},\n    _copyMetaData = function _copyMetaData(source, copy) {\n  copy.totalLength = source.totalLength;\n\n  if (source.samples) {\n    //segment\n    copy.samples = source.samples.slice(0);\n    copy.lookup = source.lookup.slice(0);\n    copy.minLength = source.minLength;\n    copy.resolution = source.resolution;\n  } else if (source.totalPoints) {\n    //rawPath\n    copy.totalPoints = source.totalPoints;\n  }\n\n  return copy;\n},\n    //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)\n_appendOrMerge = function _appendOrMerge(rawPath, segment) {\n  var index = rawPath.length,\n      prevSeg = rawPath[index - 1] || [],\n      l = prevSeg.length;\n\n  if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {\n    segment = prevSeg.concat(segment.slice(2));\n    index--;\n  }\n\n  rawPath[index] = segment;\n},\n    _bestDistance;\n/* TERMINOLOGY\n - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple \"M\" commands, defining Segments (paths aren't always connected).\n - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.\n - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.\n - the variable \"t\" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the \"p\" or \"progress\" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. \"t\" is ONLY in an individual Bezier piece.\n */\n//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).\n\n\nexport function getRawPath(value) {\n  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;\n  var e = value.getAttribute ? value : 0,\n      rawPath;\n\n  if (e && (value = value.getAttribute(\"d\"))) {\n    //implements caching\n    if (!e._gsPath) {\n      e._gsPath = {};\n    }\n\n    rawPath = e._gsPath[value];\n    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);\n  }\n\n  return !value ? console.warn(\"Expecting a <path> element or an SVG path data string\") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;\n} //copies a RawPath WITHOUT the length meta data (for speed)\n\nexport function copyRawPath(rawPath) {\n  var a = [],\n      i = 0;\n\n  for (; i < rawPath.length; i++) {\n    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));\n  }\n\n  return _copyMetaData(rawPath, a);\n}\nexport function reverseSegment(segment) {\n  var i = 0,\n      y;\n  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.\n\n  for (; i < segment.length; i += 2) {\n    y = segment[i];\n    segment[i] = segment[i + 1];\n    segment[i + 1] = y;\n  }\n\n  segment.reversed = !segment.reversed;\n}\n\nvar _createPath = function _createPath(e, ignore) {\n  var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n      attr = [].slice.call(e.attributes),\n      i = attr.length,\n      name;\n  ignore = \",\" + ignore + \",\";\n\n  while (--i > -1) {\n    name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\n    if (ignore.indexOf(\",\" + name + \",\") < 0) {\n      path.setAttributeNS(null, name, attr[i].nodeValue);\n    }\n  }\n\n  return path;\n},\n    _typeAttrs = {\n  rect: \"rx,ry,x,y,width,height\",\n  circle: \"r,cx,cy\",\n  ellipse: \"rx,ry,cx,cy\",\n  line: \"x1,x2,y1,y2\"\n},\n    _attrToObj = function _attrToObj(e, attrs) {\n  var props = attrs ? attrs.split(\",\") : [],\n      obj = {},\n      i = props.length;\n\n  while (--i > -1) {\n    obj[props[i]] = +e.getAttribute(props[i]) || 0;\n  }\n\n  return obj;\n}; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.\n\n\nexport function convertToPath(element, swap) {\n  var type = element.tagName.toLowerCase(),\n      circ = 0.552284749831,\n      data,\n      x,\n      y,\n      r,\n      ry,\n      path,\n      rcirc,\n      rycirc,\n      points,\n      w,\n      h,\n      x2,\n      x3,\n      x4,\n      x5,\n      x6,\n      y2,\n      y3,\n      y4,\n      y5,\n      y6,\n      attr;\n\n  if (type === \"path\" || !element.getBBox) {\n    return element;\n  }\n\n  path = _createPath(element, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n  attr = _attrToObj(element, _typeAttrs[type]);\n\n  if (type === \"rect\") {\n    r = attr.rx;\n    ry = attr.ry || r;\n    x = attr.x;\n    y = attr.y;\n    w = attr.width - r * 2;\n    h = attr.height - ry * 2;\n\n    if (r || ry) {\n      //if there are rounded corners, render cubic beziers\n      x2 = x + r * (1 - circ);\n      x3 = x + r;\n      x4 = x3 + w;\n      x5 = x4 + r * circ;\n      x6 = x4 + r;\n      y2 = y + ry * (1 - circ);\n      y3 = y + ry;\n      y4 = y3 + h;\n      y5 = y4 + ry * circ;\n      y6 = y4 + ry;\n      data = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n    } else {\n      data = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + -w + \" v\" + -h + \" h\" + w + \"z\";\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    if (type === \"circle\") {\n      r = ry = attr.r;\n      rycirc = r * circ;\n    } else {\n      r = attr.rx;\n      ry = attr.ry;\n      rycirc = ry * circ;\n    }\n\n    x = attr.cx;\n    y = attr.cy;\n    rcirc = r * circ;\n    data = \"M\" + (x + r) + \",\" + y + \" C\" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n  } else if (type === \"line\") {\n    data = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = (element.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n    x = points.shift();\n    y = points.shift();\n    data = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\n    if (type === \"polygon\") {\n      data += \",\" + x + \",\" + y + \"z\";\n    }\n  }\n\n  path.setAttribute(\"d\", rawPathToString(path._gsRawPath = stringToRawPath(data)));\n\n  if (swap && element.parentNode) {\n    element.parentNode.insertBefore(path, element);\n    element.parentNode.removeChild(element);\n  }\n\n  return path;\n} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)\n\nexport function getRotationAtProgress(rawPath, progress) {\n  var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);\n  return getRotationAtBezierT(d.segment, d.i, d.t);\n}\n\nfunction getRotationAtBezierT(segment, i, t) {\n  var a = segment[i],\n      b = segment[i + 2],\n      c = segment[i + 4],\n      x;\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;\n  a = segment[i + 1];\n  b = segment[i + 3];\n  c = segment[i + 5];\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);\n}\n\nexport function sliceRawPath(rawPath, start, end) {\n  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.\n\n  start = _roundPrecise(start) || 0;\n  var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),\n      path = copyRawPath(rawPath);\n\n  if (start > end) {\n    start = 1 - start;\n    end = 1 - end;\n\n    _reverseRawPath(path);\n\n    path.totalLength = 0;\n  }\n\n  if (start < 0 || end < 0) {\n    var offset = Math.abs(~~Math.min(start, end)) + 1;\n    start += offset;\n    end += offset;\n  }\n\n  path.totalLength || cacheRawPathMeasurements(path);\n  var wrap = end > 1,\n      s = getProgressData(path, start, _temp, true),\n      e = getProgressData(path, end, _temp2),\n      eSeg = e.segment,\n      sSeg = s.segment,\n      eSegIndex = e.segIndex,\n      sSegIndex = s.segIndex,\n      ei = e.i,\n      si = s.i,\n      sameSegment = sSegIndex === eSegIndex,\n      sameBezier = ei === si && sameSegment,\n      wrapsBehind,\n      sShift,\n      eShift,\n      i,\n      copy,\n      totalSegments,\n      l,\n      j;\n\n  if (wrap || loops) {\n    wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;\n\n    if (_splitSegment(path, sSegIndex, si, s.t)) {\n      sSegIndex++;\n\n      if (!wrapsBehind) {\n        eSegIndex++;\n\n        if (sameBezier) {\n          e.t = (e.t - s.t) / (1 - s.t);\n          ei = 0;\n        } else if (sameSegment) {\n          ei -= si;\n        }\n      }\n    }\n\n    if (Math.abs(1 - (end - start)) < 1e-5) {\n      eSegIndex = sSegIndex - 1;\n    } else if (!e.t && eSegIndex) {\n      eSegIndex--;\n    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {\n      sSegIndex++;\n    }\n\n    if (s.t === 1) {\n      sSegIndex = (sSegIndex + 1) % path.length;\n    }\n\n    copy = [];\n    totalSegments = path.length;\n    l = 1 + totalSegments * loops;\n    j = sSegIndex;\n    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;\n\n    for (i = 0; i < l; i++) {\n      _appendOrMerge(copy, path[j++ % totalSegments]);\n    }\n\n    path = copy;\n  } else {\n    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);\n\n    if (start !== end) {\n      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);\n      sameSegment && (eShift += sShift);\n      eSeg.splice(ei + eShift + 2);\n      (sShift || si) && sSeg.splice(0, si + sShift);\n      i = path.length;\n\n      while (i--) {\n        //chop off any extra segments\n        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);\n      }\n    } else {\n      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!\n\n      ei += eShift;\n      s = eSeg[ei];\n      e = eSeg[ei + 1];\n      eSeg.length = eSeg.totalLength = 0;\n      eSeg.totalPoints = path.totalPoints = 8;\n      eSeg.push(s, e, s, e, s, e, s, e);\n    }\n  }\n\n  path.totalLength = 0;\n  return path;\n} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a \"samples\" Array that has the length up to each of those sample points (always increasing from the start) as well as a \"lookup\" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a \"totalLength\" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.\n\nfunction measureSegment(segment, startIndex, bezierQty) {\n  startIndex = startIndex || 0;\n\n  if (!segment.samples) {\n    segment.samples = [];\n    segment.lookup = [];\n  }\n\n  var resolution = ~~segment.resolution || 12,\n      inc = 1 / resolution,\n      endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,\n      x1 = segment[startIndex],\n      y1 = segment[startIndex + 1],\n      samplesIndex = startIndex ? startIndex / 6 * resolution : 0,\n      samples = segment.samples,\n      lookup = segment.lookup,\n      min = (startIndex ? segment.minLength : _largeNum) || _largeNum,\n      prevLength = samples[samplesIndex + bezierQty * resolution - 1],\n      length = startIndex ? samples[samplesIndex - 1] : 0,\n      i,\n      j,\n      x4,\n      x3,\n      x2,\n      xd,\n      xd1,\n      y4,\n      y3,\n      y2,\n      yd,\n      yd1,\n      inv,\n      t,\n      lengthIndex,\n      l,\n      segLength;\n  samples.length = lookup.length = 0;\n\n  for (j = startIndex + 2; j < endIndex; j += 6) {\n    x4 = segment[j + 4] - x1;\n    x3 = segment[j + 2] - x1;\n    x2 = segment[j] - x1;\n    y4 = segment[j + 5] - y1;\n    y3 = segment[j + 3] - y1;\n    y2 = segment[j + 1] - y1;\n    xd = xd1 = yd = yd1 = 0;\n\n    if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {\n      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)\n      if (segment.length > 8) {\n        segment.splice(j, 6);\n        j -= 6;\n        endIndex -= 6;\n      }\n    } else {\n      for (i = 1; i <= resolution; i++) {\n        t = inc * i;\n        inv = 1 - t;\n        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);\n        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);\n        l = _sqrt(yd * yd + xd * xd);\n\n        if (l < min) {\n          min = l;\n        }\n\n        length += l;\n        samples[samplesIndex++] = length;\n      }\n    }\n\n    x1 += x4;\n    y1 += y4;\n  }\n\n  if (prevLength) {\n    prevLength -= length;\n\n    for (; samplesIndex < samples.length; samplesIndex++) {\n      samples[samplesIndex] += prevLength;\n    }\n  }\n\n  if (samples.length && min) {\n    segment.totalLength = segLength = samples[samples.length - 1] || 0;\n    segment.minLength = min;\n\n    if (segLength / min < 9999) {\n      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array\n      l = lengthIndex = 0;\n\n      for (i = 0; i < segLength; i += min) {\n        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;\n      }\n    }\n  } else {\n    segment.totalLength = samples[0] = 0;\n  }\n\n  return startIndex ? length - samples[startIndex / 2 - 1] : length;\n}\n\nexport function cacheRawPathMeasurements(rawPath, resolution) {\n  var pathLength, points, i;\n\n  for (i = pathLength = points = 0; i < rawPath.length; i++) {\n    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)\n\n    points += rawPath[i].length;\n    pathLength += measureSegment(rawPath[i]);\n  }\n\n  rawPath.totalPoints = points;\n  rawPath.totalLength = pathLength;\n  return rawPath;\n} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)\n\nexport function subdivideSegment(segment, i, t) {\n  if (t <= 0 || t >= 1) {\n    return 0;\n  }\n\n  var ax = segment[i],\n      ay = segment[i + 1],\n      cp1x = segment[i + 2],\n      cp1y = segment[i + 3],\n      cp2x = segment[i + 4],\n      cp2y = segment[i + 5],\n      bx = segment[i + 6],\n      by = segment[i + 7],\n      x1a = ax + (cp1x - ax) * t,\n      x2 = cp1x + (cp2x - cp1x) * t,\n      y1a = ay + (cp1y - ay) * t,\n      y2 = cp1y + (cp2y - cp1y) * t,\n      x1 = x1a + (x2 - x1a) * t,\n      y1 = y1a + (y2 - y1a) * t,\n      x2a = cp2x + (bx - cp2x) * t,\n      y2a = cp2y + (by - cp2y) * t;\n  x2 += (x2a - x2) * t;\n  y2 += (y2a - y2) * t;\n  segment.splice(i + 2, 4, _round(x1a), //first control point\n  _round(y1a), _round(x1), //second control point\n  _round(y1), _round(x1 + (x2 - x1) * t), //new fabricated anchor on line\n  _round(y1 + (y2 - y1) * t), _round(x2), //third control point\n  _round(y2), _round(x2a), //fourth control point\n  _round(y2a));\n  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);\n  return 6;\n} // returns an object {path, segment, segIndex, i, t}\n\nfunction getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {\n  decoratee = decoratee || {};\n  rawPath.totalLength || cacheRawPathMeasurements(rawPath);\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  var segIndex = 0,\n      segment = rawPath[0],\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t;\n\n  if (!progress) {\n    t = i = segIndex = 0;\n    segment = rawPath[0];\n  } else if (progress === 1) {\n    t = 1;\n    segIndex = rawPath.length - 1;\n    segment = rawPath[segIndex];\n    i = segment.length - 8;\n  } else {\n    if (rawPath.length > 1) {\n      //speed optimization: most of the time, there's only one segment so skip the recursion.\n      length = rawPath.totalLength * progress;\n      max = i = 0;\n\n      while ((max += rawPath[i++].totalLength) < length) {\n        segIndex = i;\n      }\n\n      segment = rawPath[segIndex];\n      min = max - segment.totalLength;\n      progress = (length - min) / (max - min) || 0;\n    }\n\n    samples = segment.samples;\n    resolution = segment.resolution; //how many samples per cubic bezier chunk\n\n    length = segment.totalLength * progress;\n    i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);\n    min = i ? samples[i - 1] : 0;\n    max = samples[i];\n\n    if (max < length) {\n      min = max;\n      max = samples[++i];\n    }\n\n    t = 1 / resolution * ((length - min) / (max - min) + i % resolution);\n    i = ~~(i / resolution) * 6;\n\n    if (pushToNextIfAtEnd && t === 1) {\n      if (i + 6 < segment.length) {\n        i += 6;\n        t = 0;\n      } else if (segIndex + 1 < rawPath.length) {\n        i = t = 0;\n        segment = rawPath[++segIndex];\n      }\n    }\n  }\n\n  decoratee.t = t;\n  decoratee.i = i;\n  decoratee.path = rawPath;\n  decoratee.segment = segment;\n  decoratee.segIndex = segIndex;\n  return decoratee;\n}\n\nexport function getPositionOnPath(rawPath, progress, includeAngle, point) {\n  var segment = rawPath[0],\n      result = point || {},\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t,\n      a,\n      inv;\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  if (rawPath.length > 1) {\n    //speed optimization: most of the time, there's only one segment so skip the recursion.\n    length = rawPath.totalLength * progress;\n    max = i = 0;\n\n    while ((max += rawPath[i++].totalLength) < length) {\n      segment = rawPath[i];\n    }\n\n    min = max - segment.totalLength;\n    progress = (length - min) / (max - min) || 0;\n  }\n\n  samples = segment.samples;\n  resolution = segment.resolution;\n  length = segment.totalLength * progress;\n  i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);\n  min = i ? samples[i - 1] : 0;\n  max = samples[i];\n\n  if (max < length) {\n    min = max;\n    max = samples[++i];\n  }\n\n  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;\n  inv = 1 - t;\n  i = ~~(i / resolution) * 6;\n  a = segment[i];\n  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);\n  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);\n\n  if (includeAngle) {\n    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;\n  }\n\n  return result;\n} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).\n\nexport function transformRawPath(rawPath, a, b, c, d, tx, ty) {\n  var j = rawPath.length,\n      segment,\n      l,\n      i,\n      x,\n      y;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 2) {\n      x = segment[i];\n      y = segment[i + 1];\n      segment[i] = x * a + y * c + tx;\n      segment[i + 1] = x * b + y * d + ty;\n    }\n  }\n\n  rawPath._dirty = 1;\n  return rawPath;\n} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.\n\nfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n  if (lastX === x && lastY === y) {\n    return;\n  }\n\n  rx = _abs(rx);\n  ry = _abs(ry);\n\n  var angleRad = angle % 360 * _DEG2RAD,\n      cosAngle = _cos(angleRad),\n      sinAngle = _sin(angleRad),\n      PI = Math.PI,\n      TWOPI = PI * 2,\n      dx2 = (lastX - x) / 2,\n      dy2 = (lastY - y) / 2,\n      x1 = cosAngle * dx2 + sinAngle * dy2,\n      y1 = -sinAngle * dx2 + cosAngle * dy2,\n      x1_sq = x1 * x1,\n      y1_sq = y1 * y1,\n      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n  if (radiiCheck > 1) {\n    rx = _sqrt(radiiCheck) * rx;\n    ry = _sqrt(radiiCheck) * ry;\n  }\n\n  var rx_sq = rx * rx,\n      ry_sq = ry * ry,\n      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n  if (sq < 0) {\n    sq = 0;\n  }\n\n  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n      cx1 = coef * (rx * y1 / ry),\n      cy1 = coef * -(ry * x1 / rx),\n      sx2 = (lastX + x) / 2,\n      sy2 = (lastY + y) / 2,\n      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n      ux = (x1 - cx1) / rx,\n      uy = (y1 - cy1) / ry,\n      vx = (-x1 - cx1) / rx,\n      vy = (-y1 - cy1) / ry,\n      temp = ux * ux + uy * uy,\n      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.\n\n  if (!sweepFlag && angleExtent > 0) {\n    angleExtent -= TWOPI;\n  } else if (sweepFlag && angleExtent < 0) {\n    angleExtent += TWOPI;\n  }\n\n  angleStart %= TWOPI;\n  angleExtent %= TWOPI;\n\n  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n      rawPath = [],\n      angleIncrement = angleExtent / segments,\n      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n      ma = cosAngle * rx,\n      mb = sinAngle * rx,\n      mc = sinAngle * -ry,\n      md = cosAngle * ry,\n      i;\n\n  for (i = 0; i < segments; i++) {\n    angle = angleStart + i * angleIncrement;\n    x1 = _cos(angle);\n    y1 = _sin(angle);\n    ux = _cos(angle += angleIncrement);\n    uy = _sin(angle);\n    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\n\n  for (i = 0; i < rawPath.length; i += 2) {\n    x1 = rawPath[i];\n    y1 = rawPath[i + 1];\n    rawPath[i] = x1 * ma + y1 * mc + cx;\n    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n  }\n\n  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be\n\n  rawPath[i - 1] = y;\n  return rawPath;\n} //Spits back a RawPath with absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\n\nexport function stringToRawPath(d) {\n  var a = (d + \"\").replace(_scientific, function (m) {\n    var n = +m;\n    return n < 0.0001 && n > -0.0001 ? 0 : n;\n  }).match(_svgPathExp) || [],\n      //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n  path = [],\n      relativeX = 0,\n      relativeY = 0,\n      twoThirds = 2 / 3,\n      elements = a.length,\n      points = 0,\n      errorMessage = \"ERROR: malformed path: \" + d,\n      i,\n      j,\n      x,\n      y,\n      command,\n      isRelative,\n      segment,\n      startX,\n      startY,\n      difX,\n      difY,\n      beziers,\n      prevCommand,\n      flag1,\n      flag2,\n      line = function line(sx, sy, ex, ey) {\n    difX = (ex - sx) / 3;\n    difY = (ey - sy) / 3;\n    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n  };\n\n  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n    console.log(errorMessage);\n    return path;\n  }\n\n  for (i = 0; i < elements; i++) {\n    prevCommand = command;\n\n    if (isNaN(a[i])) {\n      command = a[i].toUpperCase();\n      isRelative = command !== a[i]; //lower case means relative\n    } else {\n      //commands like \"C\" can be strung together without any new command characters between.\n      i--;\n    }\n\n    x = +a[i + 1];\n    y = +a[i + 2];\n\n    if (isRelative) {\n      x += relativeX;\n      y += relativeY;\n    }\n\n    if (!i) {\n      startX = x;\n      startY = y;\n    } // \"M\" (move)\n\n\n    if (command === \"M\") {\n      if (segment) {\n        if (segment.length < 8) {\n          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n          path.length -= 1;\n        } else {\n          points += segment.length;\n        }\n      }\n\n      relativeX = startX = x;\n      relativeY = startY = y;\n      segment = [x, y];\n      path.push(segment);\n      i += 2;\n      command = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n      // \"C\" (cubic bezier)\n    } else if (command === \"C\") {\n      if (!segment) {\n        segment = [0, 0];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      } //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\n\n      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n      i += 6; // \"S\" (continuation of cubic bezier)\n    } else if (command === \"S\") {\n      difX = relativeX;\n      difY = relativeY;\n\n      if (prevCommand === \"C\" || prevCommand === \"S\") {\n        difX += relativeX - segment[segment.length - 4];\n        difY += relativeY - segment[segment.length - 3];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n      i += 4; // \"Q\" (quadratic bezier)\n    } else if (command === \"Q\") {\n      difX = relativeX + (x - relativeX) * twoThirds;\n      difY = relativeY + (y - relativeY) * twoThirds;\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      relativeX += a[i + 3] * 1;\n      relativeY += a[i + 4] * 1;\n      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n      i += 4; // \"T\" (continuation of quadratic bezier)\n    } else if (command === \"T\") {\n      difX = relativeX - segment[segment.length - 4];\n      difY = relativeY - segment[segment.length - 3];\n      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n      i += 2; // \"H\" (horizontal line)\n    } else if (command === \"H\") {\n      line(relativeX, relativeY, relativeX = x, relativeY);\n      i += 1; // \"V\" (vertical line)\n    } else if (command === \"V\") {\n      //adjust values because the first (and only one) isn't x in this case, it's y.\n      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n      i += 1; // \"L\" (line) or \"Z\" (close)\n    } else if (command === \"L\" || command === \"Z\") {\n      if (command === \"Z\") {\n        x = startX;\n        y = startY;\n        segment.closed = true;\n      }\n\n      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n        line(relativeX, relativeY, x, y);\n\n        if (command === \"L\") {\n          i += 2;\n        }\n      }\n\n      relativeX = x;\n      relativeY = y; // \"A\" (arc)\n    } else if (command === \"A\") {\n      flag1 = a[i + 4];\n      flag2 = a[i + 5];\n      difX = a[i + 6];\n      difY = a[i + 7];\n      j = 7;\n\n      if (flag1.length > 1) {\n        // for cases when the flags are merged, like \"a8 8 0 018 8\" (the 0 and 1 flags are WITH the x value of 8, but it could also be \"a8 8 0 01-8 8\" so it may include x or not)\n        if (flag1.length < 3) {\n          difY = difX;\n          difX = flag2;\n          j--;\n        } else {\n          difY = flag2;\n          difX = flag1.substr(2);\n          j -= 2;\n        }\n\n        flag2 = flag1.charAt(1);\n        flag1 = flag1.charAt(0);\n      }\n\n      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n      i += j;\n\n      if (beziers) {\n        for (j = 0; j < beziers.length; j++) {\n          segment.push(beziers[j]);\n        }\n      }\n\n      relativeX = segment[segment.length - 2];\n      relativeY = segment[segment.length - 1];\n    } else {\n      console.log(errorMessage);\n    }\n  }\n\n  i = segment.length;\n\n  if (i < 6) {\n    //in case there's odd SVG like a M0,0 command at the very end.\n    path.pop();\n    i = 0;\n  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n    segment.closed = true;\n  }\n\n  path.totalPoints = points + i;\n  return path;\n} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays\n\nexport function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n  var x12 = (x1 + x2) / 2,\n      y12 = (y1 + y2) / 2,\n      x23 = (x2 + x3) / 2,\n      y23 = (y2 + y3) / 2,\n      x34 = (x3 + x4) / 2,\n      y34 = (y3 + y4) / 2,\n      x123 = (x12 + x23) / 2,\n      y123 = (y12 + y23) / 2,\n      x234 = (x23 + x34) / 2,\n      y234 = (y23 + y34) / 2,\n      x1234 = (x123 + x234) / 2,\n      y1234 = (y123 + y234) / 2,\n      dx = x4 - x1,\n      dy = y4 - y1,\n      d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),\n      d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),\n      length;\n\n  if (!points) {\n    points = [x1, y1, x4, y4];\n    index = 2;\n  }\n\n  points.splice(index || points.length - 2, 0, x1234, y1234);\n\n  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n    length = points.length;\n    bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n    bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));\n  }\n\n  return points;\n}\n/*\nfunction getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians\n\tvar dx1 = x1 - x0,\n\t\tdy1 = y1 - y0,\n\t\tdx2 = x2 - x1,\n\t\tdy2 = y2 - y1,\n\t\tdx3 = x2 - x0,\n\t\tdy3 = y2 - y0,\n\t\ta = dx1 * dx1 + dy1 * dy1,\n\t\tb = dx2 * dx2 + dy2 * dy2,\n\t\tc = dx3 * dx3 + dy3 * dy3;\n\treturn Math.acos( (a + b - c) / _sqrt(4 * a * b) );\n},\n*/\n//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)\n\nexport function flatPointsToSegment(points, curviness) {\n  if (curviness === void 0) {\n    curviness = 1;\n  }\n\n  var x = points[0],\n      y = 0,\n      segment = [x, y],\n      i = 2;\n\n  for (; i < points.length; i += 2) {\n    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);\n  }\n\n  return segment;\n} //points is an array of x/y points, like [x, y, x, y, x, y]\n\nexport function pointsToSegment(points, curviness, cornerThreshold) {\n  //points = simplifyPoints(points, tolerance);\n  _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.\n\n  var l = points.length - 2,\n      x = +points[0],\n      y = +points[1],\n      nextX = +points[2],\n      nextY = +points[3],\n      segment = [x, y, x, y],\n      dx2 = nextX - x,\n      dy2 = nextY - y,\n      closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,\n      prevX,\n      prevY,\n      angle,\n      slope,\n      i,\n      dx1,\n      dx3,\n      dy1,\n      dy3,\n      d1,\n      d2,\n      a,\n      b,\n      c;\n\n  if (isNaN(cornerThreshold)) {\n    cornerThreshold = Math.PI / 10;\n  }\n\n  if (closed) {\n    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n\n  for (i = 2; i < l; i += 2) {\n    prevX = x;\n    prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n\n    if (x === nextX && y === nextY) {\n      continue;\n    }\n\n    dx1 = dx2;\n    dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    dx3 = nextX - prevX;\n    dy3 = nextY - prevY;\n    a = dx1 * dx1 + dy1 * dy1;\n    b = dx2 * dx2 + dy2 * dy2;\n    c = dx3 * dx3 + dy3 * dy3;\n    angle = Math.acos((a + b - c) / _sqrt(4 * a * b)); //angle between the 3 points\n\n    d2 = angle / Math.PI * curviness; //temporary precalculation for speed (reusing d2 variable)\n\n    d1 = _sqrt(a) * d2; //the tighter the angle, the shorter we make the handles in proportion.\n\n    d2 *= _sqrt(b);\n\n    if (x !== prevX || y !== prevY) {\n      if (angle > cornerThreshold) {\n        slope = _atan2(dy3, dx3);\n        segment.push(_round(x - _cos(slope) * d1), //first control point\n        _round(y - _sin(slope) * d1), _round(x), //anchor\n        _round(y), _round(x + _cos(slope) * d2), //second control point\n        _round(y + _sin(slope) * d2));\n      } else {\n        slope = _atan2(dy1, dx1);\n        segment.push(_round(x - _cos(slope) * d1), //first control point\n        _round(y - _sin(slope) * d1));\n        slope = _atan2(dy2, dx2);\n        segment.push(_round(x), //anchor\n        _round(y), _round(x + _cos(slope) * d2), //second control point\n        _round(y + _sin(slope) * d2));\n      }\n    }\n  }\n\n  x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;\n\n  if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2\n\nfunction pointToSegDist(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1,\n      dy = y2 - y1,\n      t;\n\n  if (dx || dy) {\n    t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);\n}\n\nfunction simplifyStep(points, first, last, tolerance, simplified) {\n  var maxSqDist = tolerance,\n      firstX = points[first],\n      firstY = points[first + 1],\n      lastX = points[last],\n      lastY = points[last + 1],\n      index,\n      i,\n      d;\n\n  for (i = first + 2; i < last; i += 2) {\n    d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);\n\n    if (d > maxSqDist) {\n      index = i;\n      maxSqDist = d;\n    }\n  }\n\n  if (maxSqDist > tolerance) {\n    index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);\n    simplified.push(points[index], points[index + 1]);\n    last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);\n  }\n} //points is an array of x/y values like [x, y, x, y, x, y]\n\n\nexport function simplifyPoints(points, tolerance) {\n  var prevX = parseFloat(points[0]),\n      prevY = parseFloat(points[1]),\n      temp = [prevX, prevY],\n      l = points.length - 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      result,\n      last;\n  tolerance = Math.pow(tolerance || 1, 2);\n\n  for (i = 2; i < l; i += 2) {\n    x = parseFloat(points[i]);\n    y = parseFloat(points[i + 1]);\n    dx = prevX - x;\n    dy = prevY - y;\n\n    if (dx * dx + dy * dy > tolerance) {\n      temp.push(x, y);\n      prevX = x;\n      prevY = y;\n    }\n  }\n\n  temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));\n  last = temp.length - 2;\n  result = [temp[0], temp[1]];\n  simplifyStep(temp, 0, last, tolerance, result);\n  result.push(temp[last], temp[last + 1]);\n  return result;\n}\n\nfunction getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {\n  var inc = (end - start) / slices,\n      best = 0,\n      t = start,\n      x,\n      y,\n      d,\n      dx,\n      dy,\n      inv;\n  _bestDistance = _largeNum;\n\n  while (t <= end) {\n    inv = 1 - t;\n    x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;\n    y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;\n    dx = x - px;\n    dy = y - py;\n    d = dx * dx + dy * dy;\n\n    if (d < _bestDistance) {\n      _bestDistance = d;\n      best = t;\n    }\n\n    t += inc;\n  }\n\n  return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;\n}\n\nexport function getClosestData(rawPath, x, y, slices) {\n  //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)\n  var closest = {\n    j: 0,\n    i: 0,\n    t: 0\n  },\n      bestDistance = _largeNum,\n      i,\n      j,\n      t,\n      segment;\n\n  for (j = 0; j < rawPath.length; j++) {\n    segment = rawPath[j];\n\n    for (i = 0; i < segment.length; i += 6) {\n      t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n      if (bestDistance > _bestDistance) {\n        bestDistance = _bestDistance;\n        closest.j = j;\n        closest.i = i;\n        closest.t = t;\n      }\n    }\n  }\n\n  return closest;\n} //subdivide a Segment closest to a specific x,y coordinate\n\nexport function subdivideSegmentNear(x, y, segment, slices, iterations) {\n  var l = segment.length,\n      bestDistance = _largeNum,\n      bestT = 0,\n      bestSegmentIndex = 0,\n      t,\n      i;\n  slices = slices || 20;\n  iterations = iterations || 3;\n\n  for (i = 0; i < l; i += 6) {\n    t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n    if (bestDistance > _bestDistance) {\n      bestDistance = _bestDistance;\n      bestT = t;\n      bestSegmentIndex = i;\n    }\n  }\n\n  t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);\n  subdivideSegment(segment, bestSegmentIndex, t);\n  return bestSegmentIndex + 6;\n}\n/*\nTakes any of the following and converts it to an all Cubic Bezier SVG data string:\n- A <path> data string like \"M0,0 L2,4 v20,15 H100\"\n- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]\n- A Segment, like [x, y, x, y, x, y, x, y]\n\nNote: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13\n*/\n\nexport function rawPathToString(rawPath) {\n  if (_isNumber(rawPath[0])) {\n    //in case a segment is passed in instead\n    rawPath = [rawPath];\n  }\n\n  var result = \"\",\n      l = rawPath.length,\n      sl,\n      s,\n      i,\n      segment;\n\n  for (s = 0; s < l; s++) {\n    segment = rawPath[s];\n    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n    sl = segment.length;\n\n    for (i = 2; i < sl; i++) {\n      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n    }\n\n    if (segment.closed) {\n      result += \"z\";\n    }\n  }\n\n  return result;\n}\n/*\n// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.\nexport function cpCoordsToAngles(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tx, y, i;\n\tfor (i = 0; i < segment.length; i+=6) {\n\t\tx = segment[i+2] - segment[i];\n\t\ty = segment[i+3] - segment[i+1];\n\t\tresult[i+2] = Math.atan2(y, x);\n\t\tresult[i+3] = Math.sqrt(x * x + y * y);\n\t\tx = segment[i+6] - segment[i+4];\n\t\ty = segment[i+7] - segment[i+5];\n\t\tresult[i+4] = Math.atan2(y, x);\n\t\tresult[i+5] = Math.sqrt(x * x + y * y);\n\t}\n\treturn result;\n}\n\n// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.\nexport function cpAnglesToCoords(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tlength = segment.length,\n\t\trnd = 1000,\n\t\tangle, l, i, j;\n\tfor (i = 0; i < length; i+=6) {\n\t\tangle = segment[i+2];\n\t\tl = segment[i+3]; //length\n\t\tresult[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t\tangle = segment[i+4];\n\t\tl = segment[i+5]; //length\n\t\tresult[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t}\n\treturn result;\n}\n\n//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\nexport function populateSmoothData(rawPath) {\n\tlet j = rawPath.length,\n\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\twhile (--j > -1) {\n\t\tsegment = rawPath[j];\n\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\tisSmooth.length = 4;\n\t\tl = segment.length - 2;\n\t\tfor (i = 6; i < l; i += 6) {\n\t\t\tx = segment[i] - segment[i - 2];\n\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tsmooth = (Math.abs(a - a2) < 0.09);\n\t\t\tif (smooth) {\n\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t}\n\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t}\n\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\tx = segment[0] - segment[l-2];\n\t\t\ty = segment[1] - segment[l-1];\n\t\t\tx2 = segment[2] - segment[0];\n\t\t\ty2 = segment[3] - segment[1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tif (Math.abs(a - a2) < 0.09) {\n\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\tsmoothData[2] = a2;\n\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t}\n\t\t}\n\t}\n\treturn rawPath;\n}\nexport function pointToScreen(svgElement, point) {\n\tif (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point\n\t\tlet rawPath = getRawPath(svgElement);\n\t\tpoint = svgElement.ownerSVGElement.createSVGPoint();\n\t\tpoint.x = rawPath[0][0];\n\t\tpoint.y = rawPath[0][1];\n\t}\n\treturn point.matrixTransform(svgElement.getScreenCTM());\n}\n\n*/","/*!\n * MorphSVGPlugin 3.9.1\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getRawPath, reverseSegment, stringToRawPath, rawPathToString, convertToPath as _convertToPath } from \"./utils/paths.js\";\n\nvar gsap,\n    _toArray,\n    _lastLinkedAnchor,\n    _doc,\n    _coreInitted,\n    PluginClass,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _atan2 = Math.atan2,\n    _cos = Math.cos,\n    _sin = Math.sin,\n    _sqrt = Math.sqrt,\n    _PI = Math.PI,\n    _2PI = _PI * 2,\n    _angleMin = _PI * 0.3,\n    _angleMax = _PI * 0.7,\n    _bigNum = 1e20,\n    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _commands = /[achlmqstvz]/i,\n    _log = function _log(message) {\n  return console && console.warn(message);\n},\n    _bonusValidated = 1,\n    //<name>MorphSVGPlugin</name>\n_getAverageXY = function _getAverageXY(segment) {\n  var l = segment.length,\n      x = 0,\n      y = 0,\n      i;\n\n  for (i = 0; i < l; i++) {\n    x += segment[i++];\n    y += segment[i];\n  }\n\n  return [x / (l / 2), y / (l / 2)];\n},\n    _getSize = function _getSize(segment) {\n  //rough estimate of the bounding box (based solely on the anchors) of a single segment. sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n  var l = segment.length,\n      xMax = segment[0],\n      xMin = xMax,\n      yMax = segment[1],\n      yMin = yMax,\n      x,\n      y,\n      i;\n\n  for (i = 6; i < l; i += 6) {\n    x = segment[i];\n    y = segment[i + 1];\n\n    if (x > xMax) {\n      xMax = x;\n    } else if (x < xMin) {\n      xMin = x;\n    }\n\n    if (y > yMax) {\n      yMax = y;\n    } else if (y < yMin) {\n      yMin = y;\n    }\n  }\n\n  segment.centerX = (xMax + xMin) / 2;\n  segment.centerY = (yMax + yMin) / 2;\n  return segment.size = (xMax - xMin) * (yMax - yMin);\n},\n    _getTotalSize = function _getTotalSize(rawPath, samplesPerBezier) {\n  if (samplesPerBezier === void 0) {\n    samplesPerBezier = 3;\n  }\n\n  //rough estimate of the bounding box of the entire list of Bezier segments (based solely on the anchors). sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n  var j = rawPath.length,\n      xMax = rawPath[0][0],\n      xMin = xMax,\n      yMax = rawPath[0][1],\n      yMin = yMax,\n      inc = 1 / samplesPerBezier,\n      l,\n      x,\n      y,\n      i,\n      segment,\n      k,\n      t,\n      inv,\n      x1,\n      y1,\n      x2,\n      x3,\n      x4,\n      y2,\n      y3,\n      y4;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 6; i < l; i += 6) {\n      x1 = segment[i];\n      y1 = segment[i + 1];\n      x2 = segment[i + 2] - x1;\n      y2 = segment[i + 3] - y1;\n      x3 = segment[i + 4] - x1;\n      y3 = segment[i + 5] - y1;\n      x4 = segment[i + 6] - x1;\n      y4 = segment[i + 7] - y1;\n      k = samplesPerBezier;\n\n      while (--k > -1) {\n        t = inc * k;\n        inv = 1 - t;\n        x = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;\n        y = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;\n\n        if (x > xMax) {\n          xMax = x;\n        } else if (x < xMin) {\n          xMin = x;\n        }\n\n        if (y > yMax) {\n          yMax = y;\n        } else if (y < yMin) {\n          yMin = y;\n        }\n      }\n    }\n  }\n\n  rawPath.centerX = (xMax + xMin) / 2;\n  rawPath.centerY = (yMax + yMin) / 2;\n  rawPath.left = xMin;\n  rawPath.width = xMax - xMin;\n  rawPath.top = yMin;\n  rawPath.height = yMax - yMin;\n  return rawPath.size = (xMax - xMin) * (yMax - yMin);\n},\n    _sortByComplexity = function _sortByComplexity(a, b) {\n  return b.length - a.length;\n},\n    _sortBySize = function _sortBySize(a, b) {\n  var sizeA = a.size || _getSize(a),\n      sizeB = b.size || _getSize(b);\n\n  return Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20 ? b.centerX - a.centerX || b.centerY - a.centerY : sizeB - sizeA; //if the size is within 10% of each other, prioritize position from left to right, then top to bottom.\n},\n    _offsetSegment = function _offsetSegment(segment, shapeIndex) {\n  var a = segment.slice(0),\n      l = segment.length,\n      wrap = l - 2,\n      i,\n      index;\n  shapeIndex = shapeIndex | 0;\n\n  for (i = 0; i < l; i++) {\n    index = (i + shapeIndex) % wrap;\n    segment[i++] = a[index];\n    segment[i] = a[index + 1];\n  }\n},\n    _getTotalMovement = function _getTotalMovement(sb, eb, shapeIndex, offsetX, offsetY) {\n  var l = sb.length,\n      d = 0,\n      wrap = l - 2,\n      index,\n      i,\n      x,\n      y;\n  shapeIndex *= 6;\n\n  for (i = 0; i < l; i += 6) {\n    index = (i + shapeIndex) % wrap;\n    y = sb[index] - (eb[i] - offsetX);\n    x = sb[index + 1] - (eb[i + 1] - offsetY);\n    d += _sqrt(x * x + y * y);\n  }\n\n  return d;\n},\n    _getClosestShapeIndex = function _getClosestShapeIndex(sb, eb, checkReverse) {\n  //finds the index in a closed cubic bezier array that's closest to the angle provided (angle measured from the center or average x/y).\n  var l = sb.length,\n      sCenter = _getAverageXY(sb),\n      //when comparing distances, adjust the coordinates as if the shapes are centered with each other.\n  eCenter = _getAverageXY(eb),\n      offsetX = eCenter[0] - sCenter[0],\n      offsetY = eCenter[1] - sCenter[1],\n      min = _getTotalMovement(sb, eb, 0, offsetX, offsetY),\n      minIndex = 0,\n      copy,\n      d,\n      i;\n\n  for (i = 6; i < l; i += 6) {\n    d = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);\n\n    if (d < min) {\n      min = d;\n      minIndex = i;\n    }\n  }\n\n  if (checkReverse) {\n    copy = sb.slice(0);\n    reverseSegment(copy);\n\n    for (i = 6; i < l; i += 6) {\n      d = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);\n\n      if (d < min) {\n        min = d;\n        minIndex = -i;\n      }\n    }\n  }\n\n  return minIndex / 6;\n},\n    _getClosestAnchor = function _getClosestAnchor(rawPath, x, y) {\n  //finds the x/y of the anchor that's closest to the provided x/y coordinate (returns an array, like [x, y]). The bezier should be the top-level type that contains an array for each segment.\n  var j = rawPath.length,\n      closestDistance = _bigNum,\n      closestX = 0,\n      closestY = 0,\n      segment,\n      dx,\n      dy,\n      d,\n      i,\n      l;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 6) {\n      dx = segment[i] - x;\n      dy = segment[i + 1] - y;\n      d = _sqrt(dx * dx + dy * dy);\n\n      if (d < closestDistance) {\n        closestDistance = d;\n        closestX = segment[i];\n        closestY = segment[i + 1];\n      }\n    }\n  }\n\n  return [closestX, closestY];\n},\n    _getClosestSegment = function _getClosestSegment(bezier, pool, startIndex, sortRatio, offsetX, offsetY) {\n  //matches the bezier to the closest one in a pool (array) of beziers, assuming they are in order of size and we shouldn't drop more than 20% of the size, otherwise prioritizing location (total distance to the center). Extracts the segment out of the pool array and returns it.\n  var l = pool.length,\n      index = 0,\n      minSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio,\n      //limit things based on a percentage of the size of either the bezier or the next element in the array, whichever is smaller.\n  min = _bigNum,\n      cx = bezier.centerX + offsetX,\n      cy = bezier.centerY + offsetY,\n      size,\n      i,\n      dx,\n      dy,\n      d;\n\n  for (i = startIndex; i < l; i++) {\n    size = pool[i].size || _getSize(pool[i]);\n\n    if (size < minSize) {\n      break;\n    }\n\n    dx = pool[i].centerX - cx;\n    dy = pool[i].centerY - cy;\n    d = _sqrt(dx * dx + dy * dy);\n\n    if (d < min) {\n      index = i;\n      min = d;\n    }\n  }\n\n  d = pool[index];\n  pool.splice(index, 1);\n  return d;\n},\n    _subdivideSegmentQty = function _subdivideSegmentQty(segment, quantity) {\n  var tally = 0,\n      max = 0.999999,\n      l = segment.length,\n      newPointsPerSegment = quantity / ((l - 2) / 6),\n      ax,\n      ay,\n      cp1x,\n      cp1y,\n      cp2x,\n      cp2y,\n      bx,\n      by,\n      x1,\n      y1,\n      x2,\n      y2,\n      i,\n      t;\n\n  for (i = 2; i < l; i += 6) {\n    tally += newPointsPerSegment;\n\n    while (tally > max) {\n      //compare with 0.99999 instead of 1 in order to prevent rounding errors\n      ax = segment[i - 2];\n      ay = segment[i - 1];\n      cp1x = segment[i];\n      cp1y = segment[i + 1];\n      cp2x = segment[i + 2];\n      cp2y = segment[i + 3];\n      bx = segment[i + 4];\n      by = segment[i + 5];\n      t = 1 / ((Math.floor(tally) || 1) + 1); //progress along the bezier (value between 0 and 1)\n\n      x1 = ax + (cp1x - ax) * t;\n      x2 = cp1x + (cp2x - cp1x) * t;\n      x1 += (x2 - x1) * t;\n      x2 += (cp2x + (bx - cp2x) * t - x2) * t;\n      y1 = ay + (cp1y - ay) * t;\n      y2 = cp1y + (cp2y - cp1y) * t;\n      y1 += (y2 - y1) * t;\n      y2 += (cp2y + (by - cp2y) * t - y2) * t;\n      segment.splice(i, 4, ax + (cp1x - ax) * t, //first control point\n      ay + (cp1y - ay) * t, x1, //second control point\n      y1, x1 + (x2 - x1) * t, //new fabricated anchor on line\n      y1 + (y2 - y1) * t, x2, //third control point\n      y2, cp2x + (bx - cp2x) * t, //fourth control point\n      cp2y + (by - cp2y) * t);\n      i += 6;\n      l += 6;\n      tally--;\n    }\n  }\n\n  return segment;\n},\n    _equalizeSegmentQuantity = function _equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe) {\n  //returns an array of shape indexes, 1 for each segment.\n  var dif = end.length - start.length,\n      longer = dif > 0 ? end : start,\n      shorter = dif > 0 ? start : end,\n      added = 0,\n      sortMethod = map === \"complexity\" ? _sortByComplexity : _sortBySize,\n      sortRatio = map === \"position\" ? 0 : typeof map === \"number\" ? map : 0.8,\n      i = shorter.length,\n      shapeIndices = typeof shapeIndex === \"object\" && shapeIndex.push ? shapeIndex.slice(0) : [shapeIndex],\n      reverse = shapeIndices[0] === \"reverse\" || shapeIndices[0] < 0,\n      log = shapeIndex === \"log\",\n      eb,\n      sb,\n      b,\n      x,\n      y,\n      offsetX,\n      offsetY;\n\n  if (!shorter[0]) {\n    return;\n  }\n\n  if (longer.length > 1) {\n    start.sort(sortMethod);\n    end.sort(sortMethod);\n    offsetX = longer.size || _getTotalSize(longer); //ensures centerX and centerY are defined (used below).\n\n    offsetX = shorter.size || _getTotalSize(shorter);\n    offsetX = longer.centerX - shorter.centerX;\n    offsetY = longer.centerY - shorter.centerY;\n\n    if (sortMethod === _sortBySize) {\n      for (i = 0; i < shorter.length; i++) {\n        longer.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));\n      }\n    }\n  }\n\n  if (dif) {\n    if (dif < 0) {\n      dif = -dif;\n    }\n\n    if (longer[0].length > shorter[0].length) {\n      //since we use shorter[0] as the one to map the origination point of any brand new fabricated segments, do any subdividing first so that there are more points to choose from (if necessary)\n      _subdivideSegmentQty(shorter[0], (longer[0].length - shorter[0].length) / 6 | 0);\n    }\n\n    i = shorter.length;\n\n    while (added < dif) {\n      x = longer[i].size || _getSize(longer[i]); //just to ensure centerX and centerY are calculated which we use on the next line.\n\n      b = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);\n      x = b[0];\n      y = b[1];\n      shorter[i++] = [x, y, x, y, x, y, x, y];\n      shorter.totalPoints += 8;\n      added++;\n    }\n  }\n\n  for (i = 0; i < start.length; i++) {\n    eb = end[i];\n    sb = start[i];\n    dif = eb.length - sb.length;\n\n    if (dif < 0) {\n      _subdivideSegmentQty(eb, -dif / 6 | 0);\n    } else if (dif > 0) {\n      _subdivideSegmentQty(sb, dif / 6 | 0);\n    }\n\n    if (reverse && fillSafe !== false && !sb.reversed) {\n      reverseSegment(sb);\n    }\n\n    shapeIndex = shapeIndices[i] || shapeIndices[i] === 0 ? shapeIndices[i] : \"auto\";\n\n    if (shapeIndex) {\n      //if start shape is closed, find the closest point to the start/end, and re-organize the bezier points accordingly so that the shape morphs in a more intuitive way.\n      if (sb.closed || Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5) {\n        if (shapeIndex === \"auto\" || shapeIndex === \"log\") {\n          shapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, !i || fillSafe === false);\n\n          if (shapeIndex < 0) {\n            reverse = true;\n            reverseSegment(sb);\n            shapeIndex = -shapeIndex;\n          }\n\n          _offsetSegment(sb, shapeIndex * 6);\n        } else if (shapeIndex !== \"reverse\") {\n          if (i && shapeIndex < 0) {\n            //only happens if an array is passed as shapeIndex and a negative value is defined for an index beyond 0. Very rare, but helpful sometimes.\n            reverseSegment(sb);\n          }\n\n          _offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);\n        } //otherwise, if it's not a closed shape, consider reversing it if that would make the overall travel less\n\n      } else if (!reverse && (shapeIndex === \"auto\" && Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1]) || shapeIndex % 2)) {\n        reverseSegment(sb);\n        shapeIndices[i] = -1;\n        reverse = true;\n      } else if (shapeIndex === \"auto\") {\n        shapeIndices[i] = 0;\n      } else if (shapeIndex === \"reverse\") {\n        shapeIndices[i] = -1;\n      }\n\n      if (sb.closed !== eb.closed) {\n        //if one is closed and one isn't, don't close either one otherwise the tweening will look weird (but remember, the beginning and final states will honor the actual values, so this only affects the inbetween state)\n        sb.closed = eb.closed = false;\n      }\n    }\n  }\n\n  log && _log(\"shapeIndex:[\" + shapeIndices.join(\",\") + \"]\");\n  start.shapeIndex = shapeIndices;\n  return shapeIndices;\n},\n    _pathFilter = function _pathFilter(a, shapeIndex, map, precompile, fillSafe) {\n  var start = stringToRawPath(a[0]),\n      end = stringToRawPath(a[1]);\n\n  if (!_equalizeSegmentQuantity(start, end, shapeIndex || shapeIndex === 0 ? shapeIndex : \"auto\", map, fillSafe)) {\n    return; //malformed path data or null target\n  }\n\n  a[0] = rawPathToString(start);\n  a[1] = rawPathToString(end);\n\n  if (precompile === \"log\" || precompile === true) {\n    _log('precompile:[\"' + a[0] + '\",\"' + a[1] + '\"]');\n  }\n},\n    _offsetPoints = function _offsetPoints(text, offset) {\n  if (!offset) {\n    return text;\n  }\n\n  var a = text.match(_numExp) || [],\n      l = a.length,\n      s = \"\",\n      inc,\n      i,\n      j;\n\n  if (offset === \"reverse\") {\n    i = l - 1;\n    inc = -2;\n  } else {\n    i = ((parseInt(offset, 10) || 0) * 2 + 1 + l * 100) % l;\n    inc = 2;\n  }\n\n  for (j = 0; j < l; j += 2) {\n    s += a[i - 1] + \",\" + a[i] + \" \";\n    i = (i + inc) % l;\n  }\n\n  return s;\n},\n    //adds a certain number of points while maintaining the polygon/polyline shape (so that the start/end values can have a matching quantity of points to animate). Returns the revised string.\n_equalizePointQuantity = function _equalizePointQuantity(a, quantity) {\n  var tally = 0,\n      x = parseFloat(a[0]),\n      y = parseFloat(a[1]),\n      s = x + \",\" + y + \" \",\n      max = 0.999999,\n      newPointsPerSegment,\n      i,\n      l,\n      j,\n      factor,\n      nextX,\n      nextY;\n  l = a.length;\n  newPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);\n\n  for (i = 0; i < l - 2; i += 2) {\n    tally += newPointsPerSegment;\n    nextX = parseFloat(a[i + 2]);\n    nextY = parseFloat(a[i + 3]);\n\n    if (tally > max) {\n      //compare with 0.99999 instead of 1 in order to prevent rounding errors\n      factor = 1 / (Math.floor(tally) + 1);\n      j = 1;\n\n      while (tally > max) {\n        s += (x + (nextX - x) * factor * j).toFixed(2) + \",\" + (y + (nextY - y) * factor * j).toFixed(2) + \" \";\n        tally--;\n        j++;\n      }\n    }\n\n    s += nextX + \",\" + nextY + \" \";\n    x = nextX;\n    y = nextY;\n  }\n\n  return s;\n},\n    _pointsFilter = function _pointsFilter(a) {\n  var startNums = a[0].match(_numExp) || [],\n      endNums = a[1].match(_numExp) || [],\n      dif = endNums.length - startNums.length;\n\n  if (dif > 0) {\n    a[0] = _equalizePointQuantity(startNums, dif);\n  } else {\n    a[1] = _equalizePointQuantity(endNums, -dif);\n  }\n},\n    _buildPointsFilter = function _buildPointsFilter(shapeIndex) {\n  return !isNaN(shapeIndex) ? function (a) {\n    _pointsFilter(a);\n\n    a[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));\n  } : _pointsFilter;\n},\n    _parseShape = function _parseShape(shape, forcePath, target) {\n  var isString = typeof shape === \"string\",\n      e,\n      type;\n\n  if (!isString || _selectorExp.test(shape) || (shape.match(_numExp) || []).length < 3) {\n    e = _toArray(shape)[0];\n\n    if (e) {\n      type = (e.nodeName + \"\").toUpperCase();\n\n      if (forcePath && type !== \"PATH\") {\n        //if we were passed an element (or selector text for an element) that isn't a path, convert it.\n        e = _convertToPath(e, false);\n        type = \"PATH\";\n      }\n\n      shape = e.getAttribute(type === \"PATH\" ? \"d\" : \"points\") || \"\";\n\n      if (e === target) {\n        //if the shape matches the target element, the user wants to revert to the original which should have been stored in the data-original attribute\n        shape = e.getAttributeNS(null, \"data-original\") || shape;\n      }\n    } else {\n      _log(\"WARNING: invalid morph to: \" + shape);\n\n      shape = false;\n    }\n  }\n\n  return shape;\n},\n    //adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\n_populateSmoothData = function _populateSmoothData(rawPath, tolerance) {\n  var j = rawPath.length,\n      limit = 0.2 * (tolerance || 1),\n      smooth,\n      segment,\n      x,\n      y,\n      x2,\n      y2,\n      i,\n      l,\n      a,\n      a2,\n      isSmooth,\n      smoothData;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n    smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n    isSmooth.length = 4;\n    l = segment.length - 2;\n\n    for (i = 6; i < l; i += 6) {\n      x = segment[i] - segment[i - 2];\n      y = segment[i + 1] - segment[i - 1];\n      x2 = segment[i + 2] - segment[i];\n      y2 = segment[i + 3] - segment[i + 1];\n      a = _atan2(y, x);\n      a2 = _atan2(y2, x2);\n      smooth = Math.abs(a - a2) < limit;\n\n      if (smooth) {\n        smoothData[i - 2] = a;\n        smoothData[i + 2] = a2;\n        smoothData[i - 1] = _sqrt(x * x + y * y);\n        smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n      }\n\n      isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n    } //if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\n\n    if (segment[l] === segment[0] && segment[l + 1] === segment[1]) {\n      x = segment[0] - segment[l - 2];\n      y = segment[1] - segment[l - 1];\n      x2 = segment[2] - segment[0];\n      y2 = segment[3] - segment[1];\n      a = _atan2(y, x);\n      a2 = _atan2(y2, x2);\n\n      if (Math.abs(a - a2) < limit) {\n        smoothData[l - 2] = a;\n        smoothData[2] = a2;\n        smoothData[l - 1] = _sqrt(x * x + y * y);\n        smoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n        isSmooth[l - 2] = isSmooth[l - 1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n      }\n    }\n  }\n\n  return rawPath;\n},\n    _parseOriginFactors = function _parseOriginFactors(v) {\n  var a = v.trim().split(\" \"),\n      x = ~v.indexOf(\"left\") ? 0 : ~v.indexOf(\"right\") ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),\n      y = ~v.indexOf(\"top\") ? 0 : ~v.indexOf(\"bottom\") ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);\n  return {\n    x: x / 100,\n    y: y / 100\n  };\n},\n    _shortAngle = function _shortAngle(dif) {\n  return dif !== dif % _PI ? dif + (dif < 0 ? _2PI : -_2PI) : dif;\n},\n    _morphMessage = \"Use MorphSVGPlugin.convertToPath() to convert to a path before morphing.\",\n    _tweenRotation = function _tweenRotation(start, end, i, linkedPT) {\n  var so = this._origin,\n      //starting origin\n  eo = this._eOrigin,\n      //ending origin\n  dx = start[i] - so.x,\n      dy = start[i + 1] - so.y,\n      d = _sqrt(dx * dx + dy * dy),\n      //length from starting origin to starting point\n  sa = _atan2(dy, dx),\n      angleDif,\n      _short;\n\n  dx = end[i] - eo.x;\n  dy = end[i + 1] - eo.y;\n  angleDif = _atan2(dy, dx) - sa;\n  _short = _shortAngle(angleDif); //in the case of control points, we ALWAYS link them to their anchor so that they don't get torn apart and rotate the opposite direction. If it's not a control point, we look at the most recently linked point as long as they're within a certain rotational range of each other.\n\n  if (!linkedPT && _lastLinkedAnchor && Math.abs(_short + _lastLinkedAnchor.ca) < _angleMin) {\n    linkedPT = _lastLinkedAnchor;\n  }\n\n  return this._anchorPT = _lastLinkedAnchor = {\n    _next: this._anchorPT,\n    t: start,\n    sa: sa,\n    //starting angle\n    ca: linkedPT && _short * linkedPT.ca < 0 && Math.abs(_short) > _angleMax ? angleDif : _short,\n    //change in angle\n    sl: d,\n    //starting length\n    cl: _sqrt(dx * dx + dy * dy) - d,\n    //change in length\n    i: i\n  };\n},\n    _initCore = function _initCore(required) {\n  gsap = _getGSAP();\n  PluginClass = PluginClass || gsap && gsap.plugins.morphSVG;\n\n  if (gsap && PluginClass) {\n    _toArray = gsap.utils.toArray;\n    _doc = document;\n    PluginClass.prototype._tweenRotation = _tweenRotation;\n    _coreInitted = 1;\n  } else if (required) {\n    _log(\"Please gsap.registerPlugin(MorphSVGPlugin)\");\n  }\n};\n\nexport var MorphSVGPlugin = {\n  version: \"3.9.1\",\n  name: \"morphSVG\",\n  rawVars: 1,\n  // otherwise \"render\" would be interpreted as a function-based value.\n  register: function register(core, Plugin) {\n    gsap = core;\n    PluginClass = Plugin;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore(1);\n\n    if (!value) {\n      _log(\"invalid shape\");\n\n      return false;\n    }\n\n    _isFunction(value) && (value = value.call(tween, index, target, targets));\n    var type, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;\n\n    if (typeof value === \"string\" || value.getBBox || value[0]) {\n      value = {\n        shape: value\n      };\n    } else if (typeof value === \"object\") {\n      // if there are any function-based values, parse them here (and make a copy of the object so we're not modifying the original)\n      type = {};\n\n      for (p in value) {\n        type[p] = _isFunction(value[p]) && p !== \"render\" ? value[p].call(tween, index, target, targets) : value[p];\n      }\n\n      value = type;\n    }\n\n    var cs = target.nodeType ? window.getComputedStyle(target) : {},\n        fill = cs.fill + \"\",\n        fillSafe = !(fill === \"none\" || (fill.match(_numExp) || [])[3] === \"0\" || cs.fillRule === \"evenodd\"),\n        origins = (value.origin || \"50 50\").split(\",\");\n    type = (target.nodeName + \"\").toUpperCase();\n    isPoly = type === \"POLYLINE\" || type === \"POLYGON\";\n\n    if (type !== \"PATH\" && !isPoly && !value.prop) {\n      _log(\"Cannot morph a <\" + type + \"> element. \" + _morphMessage);\n\n      return false;\n    }\n\n    p = type === \"PATH\" ? \"d\" : \"points\";\n\n    if (!value.prop && !_isFunction(target.setAttribute)) {\n      return false;\n    }\n\n    shape = _parseShape(value.shape || value.d || value.points || \"\", p === \"d\", target);\n\n    if (isPoly && _commands.test(shape)) {\n      _log(\"A <\" + type + \"> cannot accept path data. \" + _morphMessage);\n\n      return false;\n    }\n\n    shapeIndex = value.shapeIndex || value.shapeIndex === 0 ? value.shapeIndex : \"auto\";\n    map = value.map || MorphSVGPlugin.defaultMap;\n    this._prop = value.prop;\n    this._render = value.render || MorphSVGPlugin.defaultRender;\n    this._apply = \"updateTarget\" in value ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;\n    this._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);\n    this._tween = tween;\n\n    if (shape) {\n      this._target = target;\n      precompiled = typeof value.precompile === \"object\";\n      start = this._prop ? target[this._prop] : target.getAttribute(p);\n\n      if (!this._prop && !target.getAttributeNS(null, \"data-original\")) {\n        target.setAttributeNS(null, \"data-original\", start); //record the original state in a data-original attribute so that we can revert to it later.\n      }\n\n      if (p === \"d\" || this._prop) {\n        start = stringToRawPath(precompiled ? value.precompile[0] : start);\n        end = stringToRawPath(precompiled ? value.precompile[1] : shape);\n\n        if (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {\n          return false; //malformed path data or null target\n        }\n\n        if (value.precompile === \"log\" || value.precompile === true) {\n          _log('precompile:[\"' + rawPathToString(start) + '\",\"' + rawPathToString(end) + '\"]');\n        }\n\n        useRotation = (value.type || MorphSVGPlugin.defaultType) !== \"linear\";\n\n        if (useRotation) {\n          start = _populateSmoothData(start, value.smoothTolerance);\n          end = _populateSmoothData(end, value.smoothTolerance);\n\n          if (!start.size) {\n            _getTotalSize(start); //adds top/left/width/height values\n\n          }\n\n          if (!end.size) {\n            _getTotalSize(end);\n          }\n\n          originFactors = _parseOriginFactors(origins[0]);\n          this._origin = start.origin = {\n            x: start.left + originFactors.x * start.width,\n            y: start.top + originFactors.y * start.height\n          };\n\n          if (origins[1]) {\n            originFactors = _parseOriginFactors(origins[1]);\n          }\n\n          this._eOrigin = {\n            x: end.left + originFactors.x * end.width,\n            y: end.top + originFactors.y * end.height\n          };\n        }\n\n        this._rawPath = target._gsRawPath = start;\n        j = start.length;\n\n        while (--j > -1) {\n          startSeg = start[j];\n          endSeg = end[j];\n          startSmooth = startSeg.isSmooth || [];\n          endSmooth = endSeg.isSmooth || [];\n          l = startSeg.length;\n          _lastLinkedAnchor = 0; //reset; we use _lastLinkedAnchor in the _tweenRotation() method to help make sure that close points don't get ripped apart and rotate opposite directions. Typically we want to go the shortest direction, but if the previous anchor is going a different direction, we override this logic (within certain thresholds)\n\n          for (i = 0; i < l; i += 2) {\n            if (endSeg[i] !== startSeg[i] || endSeg[i + 1] !== startSeg[i + 1]) {\n              if (useRotation) {\n                if (startSmooth[i] && endSmooth[i]) {\n                  //if BOTH starting and ending values are smooth (meaning control points have basically the same slope), interpolate the rotation and length instead of the coordinates (this is what makes things smooth).\n                  sData = startSeg.smoothData;\n                  eData = endSeg.smoothData;\n                  offset = i + (i === l - 4 ? 7 - l : 5); //helps us accommodate wrapping (like if the end and start anchors are identical and the control points are smooth).\n\n                  this._controlPT = {\n                    _next: this._controlPT,\n                    i: i,\n                    j: j,\n                    l1s: sData[i + 1],\n                    l1c: eData[i + 1] - sData[i + 1],\n                    l2s: sData[offset],\n                    l2c: eData[offset] - sData[offset]\n                  };\n                  pt = this._tweenRotation(startSeg, endSeg, i + 2);\n\n                  this._tweenRotation(startSeg, endSeg, i, pt);\n\n                  this._tweenRotation(startSeg, endSeg, offset - 1, pt);\n\n                  i += 4;\n                } else {\n                  this._tweenRotation(startSeg, endSeg, i);\n                }\n              } else {\n                pt = this.add(startSeg, i, startSeg[i], endSeg[i]);\n                pt = this.add(startSeg, i + 1, startSeg[i + 1], endSeg[i + 1]) || pt;\n              }\n            }\n          }\n        }\n      } else {\n        pt = this.add(target, \"setAttribute\", target.getAttribute(p) + \"\", shape + \"\", index, targets, 0, _buildPointsFilter(shapeIndex), p);\n      }\n\n      if (useRotation) {\n        this.add(this._origin, \"x\", this._origin.x, this._eOrigin.x);\n        pt = this.add(this._origin, \"y\", this._origin.y, this._eOrigin.y);\n      }\n\n      if (pt) {\n        this._props.push(\"morphSVG\");\n\n        pt.end = shape;\n        pt.endProp = p;\n      }\n    }\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var rawPath = data._rawPath,\n        controlPT = data._controlPT,\n        anchorPT = data._anchorPT,\n        rnd = data._rnd,\n        target = data._target,\n        pt = data._pt,\n        s,\n        space,\n        easeInOut,\n        segment,\n        l,\n        angle,\n        i,\n        j,\n        x,\n        y,\n        sin,\n        cos,\n        offset;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    if (ratio === 1 && data._apply) {\n      pt = data._pt;\n\n      while (pt) {\n        if (pt.end) {\n          if (data._prop) {\n            target[data._prop] = pt.end;\n          } else {\n            target.setAttribute(pt.endProp, pt.end); //make sure the end value is exactly as specified (in case we had to add fabricated points during the tween)\n          }\n        }\n\n        pt = pt._next;\n      }\n    } else if (rawPath) {\n      //rotationally position the anchors\n      while (anchorPT) {\n        angle = anchorPT.sa + ratio * anchorPT.ca;\n        l = anchorPT.sl + ratio * anchorPT.cl; //length\n\n        anchorPT.t[anchorPT.i] = data._origin.x + _cos(angle) * l;\n        anchorPT.t[anchorPT.i + 1] = data._origin.y + _sin(angle) * l;\n        anchorPT = anchorPT._next;\n      } //smooth out the control points\n\n\n      easeInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;\n\n      while (controlPT) {\n        i = controlPT.i;\n        segment = rawPath[controlPT.j];\n        offset = i + (i === segment.length - 4 ? 7 - segment.length : 5); //accommodates wrapping around of smooth points, like if the start and end anchors are on top of each other and their handles are smooth.\n\n        angle = _atan2(segment[offset] - segment[i + 1], segment[offset - 1] - segment[i]); //average the angles\n\n        sin = _sin(angle);\n        cos = _cos(angle);\n        x = segment[i + 2];\n        y = segment[i + 3];\n        l = controlPT.l1s + easeInOut * controlPT.l1c; //length\n\n        segment[i] = x - cos * l;\n        segment[i + 1] = y - sin * l;\n        l = controlPT.l2s + easeInOut * controlPT.l2c;\n        segment[offset - 1] = x + cos * l;\n        segment[offset] = y + sin * l;\n        controlPT = controlPT._next;\n      }\n\n      target._gsRawPath = rawPath;\n\n      if (data._apply) {\n        s = \"\";\n        space = \" \";\n\n        for (j = 0; j < rawPath.length; j++) {\n          segment = rawPath[j];\n          l = segment.length;\n          s += \"M\" + (segment[0] * rnd | 0) / rnd + space + (segment[1] * rnd | 0) / rnd + \" C\";\n\n          for (i = 2; i < l; i++) {\n            //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n            s += (segment[i] * rnd | 0) / rnd + space;\n          }\n        }\n\n        if (data._prop) {\n          target[data._prop] = s;\n        } else {\n          target.setAttribute(\"d\", s);\n        }\n      }\n    }\n\n    data._render && rawPath && data._render.call(data._tween, rawPath, target);\n  },\n  kill: function kill(property) {\n    this._pt = this._rawPath = 0;\n  },\n  getRawPath: getRawPath,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  normalizeStrings: function normalizeStrings(shape1, shape2, _ref) {\n    var shapeIndex = _ref.shapeIndex,\n        map = _ref.map;\n    var result = [shape1, shape2];\n\n    _pathFilter(result, shapeIndex, map);\n\n    return result;\n  },\n  pathFilter: _pathFilter,\n  pointsFilter: _pointsFilter,\n  getTotalSize: _getTotalSize,\n  equalizeSegmentQuantity: _equalizeSegmentQuantity,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  defaultType: \"linear\",\n  defaultUpdateTarget: true,\n  defaultMap: \"size\"\n};\n_getGSAP() && gsap.registerPlugin(MorphSVGPlugin);\nexport { MorphSVGPlugin as default };","/*!\n * strings: 3.9.1\n * https://greensock.com\n *\n * Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _trimExp = /(^\\s+|\\s+$)/g;\nexport var emojiExp = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;\nexport function getText(e) {\n  var type = e.nodeType,\n      result = \"\";\n\n  if (type === 1 || type === 9 || type === 11) {\n    if (typeof e.textContent === \"string\") {\n      return e.textContent;\n    } else {\n      for (e = e.firstChild; e; e = e.nextSibling) {\n        result += getText(e);\n      }\n    }\n  } else if (type === 3 || type === 4) {\n    return e.nodeValue;\n  }\n\n  return result;\n}\nexport function splitInnerHTML(element, delimiter, trim, preserveSpaces) {\n  var node = element.firstChild,\n      result = [],\n      s;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      s = (node.nodeValue + \"\").replace(/^\\n+/g, \"\");\n\n      if (!preserveSpaces) {\n        s = s.replace(/\\s+/g, \" \");\n      }\n\n      result.push.apply(result, emojiSafeSplit(s, delimiter, trim, preserveSpaces));\n    } else if ((node.nodeName + \"\").toLowerCase() === \"br\") {\n      result[result.length - 1] += \"<br>\";\n    } else {\n      result.push(node.outerHTML);\n    }\n\n    node = node.nextSibling;\n  }\n\n  s = result.length;\n\n  while (s--) {\n    result[s] === \"&\" && result.splice(s, 1, \"&amp;\");\n  }\n\n  return result;\n}\n/*\n//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.\n\nlet _emoji = \"[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\",\n\t_emojiExp = new RegExp(_emoji),\n\t_emojiAndCharsExp = new RegExp(_emoji + \"|.\", \"g\"),\n\t_emojiSafeSplit = (text, delimiter, trim) => {\n\t\tif (trim) {\n\t\t\ttext = text.replace(_trimExp, \"\");\n\t\t}\n\t\treturn ((delimiter === \"\" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || \"\");\n\t};\n */\n\nexport function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {\n  text += \"\"; // make sure it's cast as a string. Someone may pass in a number.\n\n  if (trim) {\n    text = text.replace(_trimExp, \"\");\n  }\n\n  if (delimiter && delimiter !== \"\") {\n    return text.replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").split(delimiter);\n  }\n\n  var result = [],\n      l = text.length,\n      i = 0,\n      j,\n      character;\n\n  for (; i < l; i++) {\n    character = text.charAt(i);\n\n    if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n      //special emoji characters use 2 or 4 unicode characters that we must keep together.\n      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n      character = text.substr(i, j);\n      result.emoji = 1;\n      i += j - 1;\n    }\n\n    result.push(character === \">\" ? \"&gt;\" : character === \"<\" ? \"&lt;\" : preserveSpaces && character === \" \" && (text.charAt(i - 1) === \" \" || text.charAt(i + 1) === \" \") ? \"&nbsp;\" : character);\n  }\n\n  return result;\n}","/*!\n * SplitText: 3.9.1\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { emojiExp, getText } from \"./utils/strings.js\";\n\nvar _doc,\n    _win,\n    _coreInitted,\n    _stripExp = /(?:\\r|\\n|\\t\\t)/g,\n    //find carriage returns, new line feeds and double-tabs.\n_multipleSpacesExp = /(?:\\s\\s+)/g,\n    _initCore = function _initCore() {\n  _doc = document;\n  _win = window;\n  _coreInitted = 1;\n},\n    _bonusValidated = 1,\n    //<name>SplitText</name>\n_getComputedStyle = function _getComputedStyle(element) {\n  return _win.getComputedStyle(element);\n},\n    _isArray = Array.isArray,\n    _slice = [].slice,\n    _toArray = function _toArray(value, leaveStrings) {\n  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.\n  var type;\n  return _isArray(value) ? value : (type = typeof value) === \"string\" && !leaveStrings && value ? _slice.call(_doc.querySelectorAll(value), 0) : value && type === \"object\" && \"length\" in value ? _slice.call(value, 0) : value ? [value] : [];\n},\n    _isAbsolute = function _isAbsolute(vars) {\n  return vars.position === \"absolute\" || vars.absolute === true;\n},\n    //some characters are combining marks (think diacritics/accents in European languages) which involve 2 or 4 characters that combine in the browser to form a single character. Pass in the remaining text and an array of the special characters to search for and if the text starts with one of those special characters, it'll spit back the number of characters to retain (often 2 or 4). Used in the specialChars features that was introduced in 0.6.0.\n_findSpecialChars = function _findSpecialChars(text, chars) {\n  var i = chars.length,\n      s;\n\n  while (--i > -1) {\n    s = chars[i];\n\n    if (text.substr(0, s.length) === s) {\n      return s.length;\n    }\n  }\n},\n    _divStart = \" style='position:relative;display:inline-block;'\",\n    _cssClassFunc = function _cssClassFunc(cssClass, tag) {\n  if (cssClass === void 0) {\n    cssClass = \"\";\n  }\n\n  var iterate = ~cssClass.indexOf(\"++\"),\n      num = 1;\n\n  if (iterate) {\n    cssClass = cssClass.split(\"++\").join(\"\");\n  }\n\n  return function () {\n    return \"<\" + tag + _divStart + (cssClass ? \" class='\" + cssClass + (iterate ? num++ : \"\") + \"'>\" : \">\");\n  };\n},\n    _swapText = function _swapText(element, oldText, newText) {\n  var type = element.nodeType;\n\n  if (type === 1 || type === 9 || type === 11) {\n    for (element = element.firstChild; element; element = element.nextSibling) {\n      _swapText(element, oldText, newText);\n    }\n  } else if (type === 3 || type === 4) {\n    element.nodeValue = element.nodeValue.split(oldText).join(newText);\n  }\n},\n    _pushReversed = function _pushReversed(a, merge) {\n  var i = merge.length;\n\n  while (--i > -1) {\n    a.push(merge[i]);\n  }\n},\n    _isBeforeWordDelimiter = function _isBeforeWordDelimiter(e, root, wordDelimiter) {\n  var next;\n\n  while (e && e !== root) {\n    next = e._next || e.nextSibling;\n\n    if (next) {\n      return next.textContent.charAt(0) === wordDelimiter;\n    }\n\n    e = e.parentNode || e._parent;\n  }\n},\n    _deWordify = function _deWordify(e) {\n  var children = _toArray(e.childNodes),\n      l = children.length,\n      i,\n      child;\n\n  for (i = 0; i < l; i++) {\n    child = children[i];\n\n    if (child._isSplit) {\n      _deWordify(child);\n    } else {\n      if (i && child.previousSibling && child.previousSibling.nodeType === 3) {\n        child.previousSibling.nodeValue += child.nodeType === 3 ? child.nodeValue : child.firstChild.nodeValue;\n        e.removeChild(child);\n      } else if (child.nodeType !== 3) {\n        e.insertBefore(child.firstChild, child);\n        e.removeChild(child);\n      }\n    }\n  }\n},\n    _getStyleAsNumber = function _getStyleAsNumber(name, computedStyle) {\n  return parseFloat(computedStyle[name]) || 0;\n},\n    _setPositionsAfterSplit = function _setPositionsAfterSplit(element, vars, allChars, allWords, allLines, origWidth, origHeight) {\n  var cs = _getComputedStyle(element),\n      paddingLeft = _getStyleAsNumber(\"paddingLeft\", cs),\n      lineOffsetY = -999,\n      borderTopAndBottom = _getStyleAsNumber(\"borderBottomWidth\", cs) + _getStyleAsNumber(\"borderTopWidth\", cs),\n      borderLeftAndRight = _getStyleAsNumber(\"borderLeftWidth\", cs) + _getStyleAsNumber(\"borderRightWidth\", cs),\n      padTopAndBottom = _getStyleAsNumber(\"paddingTop\", cs) + _getStyleAsNumber(\"paddingBottom\", cs),\n      padLeftAndRight = _getStyleAsNumber(\"paddingLeft\", cs) + _getStyleAsNumber(\"paddingRight\", cs),\n      lineThreshold = _getStyleAsNumber(\"fontSize\", cs) * (vars.lineThreshold || 0.2),\n      textAlign = cs.textAlign,\n      charArray = [],\n      wordArray = [],\n      lineArray = [],\n      wordDelimiter = vars.wordDelimiter || \" \",\n      tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n      types = vars.type || vars.split || \"chars,words,lines\",\n      lines = allLines && ~types.indexOf(\"lines\") ? [] : null,\n      words = ~types.indexOf(\"words\"),\n      chars = ~types.indexOf(\"chars\"),\n      absolute = _isAbsolute(vars),\n      linesClass = vars.linesClass,\n      iterateLine = ~(linesClass || \"\").indexOf(\"++\"),\n      spaceNodesToRemove = [],\n      isFlex = cs.display === \"flex\",\n      prevInlineDisplay = element.style.display,\n      i,\n      j,\n      l,\n      node,\n      nodes,\n      isChild,\n      curLine,\n      addWordSpaces,\n      style,\n      lineNode,\n      lineWidth,\n      offset;\n\n  iterateLine && (linesClass = linesClass.split(\"++\").join(\"\"));\n  isFlex && (element.style.display = \"block\"); //copy all the descendant nodes into an array (we can't use a regular nodeList because it's live and we may need to renest things)\n\n  j = element.getElementsByTagName(\"*\");\n  l = j.length;\n  nodes = [];\n\n  for (i = 0; i < l; i++) {\n    nodes[i] = j[i];\n  } //for absolute positioning, we need to record the x/y offsets and width/height for every <div>. And even if we're not positioning things absolutely, in order to accommodate lines, we must figure out where the y offset changes so that we can sense where the lines break, and we populate the lines array.\n\n\n  if (lines || absolute) {\n    for (i = 0; i < l; i++) {\n      node = nodes[i];\n      isChild = node.parentNode === element;\n\n      if (isChild || absolute || chars && !words) {\n        offset = node.offsetTop;\n\n        if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && (node.nodeName !== \"BR\" || i === 0)) {\n          //we found some rare occasions where a certain character like &#8209; could cause the offsetTop to be off by 1 pixel, so we build in a threshold.\n          curLine = [];\n          lines.push(curLine);\n          lineOffsetY = offset;\n        }\n\n        if (absolute) {\n          //record offset x and y, as well as width and height so that we can access them later for positioning. Grabbing them at once ensures we don't trigger a browser paint & we maximize performance.\n          node._x = node.offsetLeft;\n          node._y = offset;\n          node._w = node.offsetWidth;\n          node._h = node.offsetHeight;\n        }\n\n        if (lines) {\n          if (node._isSplit && isChild || !chars && isChild || words && isChild || !words && node.parentNode.parentNode === element && !node.parentNode._isSplit) {\n            curLine.push(node);\n            node._x -= paddingLeft;\n\n            if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {\n              node._wordEnd = true;\n            }\n          }\n\n          if (node.nodeName === \"BR\" && (node.nextSibling && node.nextSibling.nodeName === \"BR\" || i === 0)) {\n            //two consecutive <br> tags signify a new [empty] line. Also, if the entire block of content STARTS with a <br>, add a line.\n            lines.push([]);\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < l; i++) {\n    node = nodes[i];\n    isChild = node.parentNode === element;\n\n    if (node.nodeName === \"BR\") {\n      if (lines || absolute) {\n        node.parentNode && node.parentNode.removeChild(node);\n        nodes.splice(i--, 1);\n        l--;\n      } else if (!words) {\n        element.appendChild(node);\n      }\n\n      continue;\n    }\n\n    if (absolute) {\n      style = node.style;\n\n      if (!words && !isChild) {\n        node._x += node.parentNode._x;\n        node._y += node.parentNode._y;\n      }\n\n      style.left = node._x + \"px\";\n      style.top = node._y + \"px\";\n      style.position = \"absolute\";\n      style.display = \"block\"; //if we don't set the width/height, things collapse in older versions of IE and the origin for transforms is thrown off in all browsers.\n\n      style.width = node._w + 1 + \"px\"; //IE is 1px short sometimes. Avoid wrapping\n\n      style.height = node._h + \"px\";\n    }\n\n    if (!words && chars) {\n      //we always start out wrapping words in their own <div> so that line breaks happen correctly, but here we'll remove those <div> tags if necessary and re-nest the characters directly into the element rather than inside the word <div>\n      if (node._isSplit) {\n        node._next = j = node.nextSibling;\n        node.parentNode.appendChild(node); //put it at the end to keep the order correct.\n\n        while (j && j.nodeType === 3 && j.textContent === \" \") {\n          // if there are nodes that are just a space right afterward, go ahead and append them to the end so they're not out of order.\n          node._next = j.nextSibling;\n          node.parentNode.appendChild(j);\n          j = j.nextSibling;\n        }\n      } else if (node.parentNode._isSplit) {\n        node._parent = node.parentNode;\n\n        if (!node.previousSibling && node.firstChild) {\n          node.firstChild._isFirst = true;\n        }\n\n        if (node.nextSibling && node.nextSibling.textContent === \" \" && !node.nextSibling.nextSibling) {\n          //if the last node inside a nested element is just a space (like T<span>nested </span>), remove it otherwise it'll get placed in the wrong order. Don't remove it right away, though, because we need to sense when words/characters are before a space like _isBeforeWordDelimiter(). Removing it now would make that a false negative.\n          spaceNodesToRemove.push(node.nextSibling);\n        }\n\n        node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;\n        node.parentNode.removeChild(node);\n        nodes.splice(i--, 1);\n        l--;\n      } else if (!isChild) {\n        offset = !node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter); //if this is the last letter in the word (and we're not breaking by lines and not positioning things absolutely), we need to add a space afterwards so that the characters don't just mash together\n\n        node.parentNode._parent && node.parentNode._parent.appendChild(node);\n        offset && node.parentNode.appendChild(_doc.createTextNode(\" \"));\n\n        if (tag === \"span\") {\n          node.style.display = \"inline\"; //so that word breaks are honored properly.\n        }\n\n        charArray.push(node);\n      }\n    } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== \"\") {\n      wordArray.push(node);\n    } else if (chars && !node._isSplit) {\n      if (tag === \"span\") {\n        node.style.display = \"inline\";\n      }\n\n      charArray.push(node);\n    }\n  }\n\n  i = spaceNodesToRemove.length;\n\n  while (--i > -1) {\n    spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);\n  }\n\n  if (lines) {\n    //the next 7 lines just give us the line width in the most reliable way and figure out the left offset (if position isn't relative or absolute). We must set the width along with text-align to ensure everything works properly for various alignments.\n    if (absolute) {\n      lineNode = _doc.createElement(tag);\n      element.appendChild(lineNode);\n      lineWidth = lineNode.offsetWidth + \"px\";\n      offset = lineNode.offsetParent === element ? 0 : element.offsetLeft;\n      element.removeChild(lineNode);\n    }\n\n    style = element.style.cssText;\n    element.style.cssText = \"display:none;\"; //to improve performance, set display:none on the element so that the browser doesn't have to worry about reflowing or rendering while we're renesting things. We'll revert the cssText later.\n    //we can't use element.innerHTML = \"\" because that causes IE to literally delete all the nodes and their content even though we've stored them in an array! So we must loop through the children and remove them.\n\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n\n    addWordSpaces = wordDelimiter === \" \" && (!absolute || !words && !chars);\n\n    for (i = 0; i < lines.length; i++) {\n      curLine = lines[i];\n      lineNode = _doc.createElement(tag);\n      lineNode.style.cssText = \"display:block;text-align:\" + textAlign + \";position:\" + (absolute ? \"absolute;\" : \"relative;\");\n\n      if (linesClass) {\n        lineNode.className = linesClass + (iterateLine ? i + 1 : \"\");\n      }\n\n      lineArray.push(lineNode);\n      l = curLine.length;\n\n      for (j = 0; j < l; j++) {\n        if (curLine[j].nodeName !== \"BR\") {\n          node = curLine[j];\n          lineNode.appendChild(node);\n          addWordSpaces && node._wordEnd && lineNode.appendChild(_doc.createTextNode(\" \"));\n\n          if (absolute) {\n            if (j === 0) {\n              lineNode.style.top = node._y + \"px\";\n              lineNode.style.left = paddingLeft + offset + \"px\";\n            }\n\n            node.style.top = \"0px\";\n\n            if (offset) {\n              node.style.left = node._x - offset + \"px\";\n            }\n          }\n        }\n      }\n\n      if (l === 0) {\n        //if there are no nodes in the line (typically meaning there were two consecutive <br> tags, just add a non-breaking space so that things display properly.\n        lineNode.innerHTML = \"&nbsp;\";\n      } else if (!words && !chars) {\n        _deWordify(lineNode);\n\n        _swapText(lineNode, String.fromCharCode(160), \" \");\n      }\n\n      if (absolute) {\n        lineNode.style.width = lineWidth;\n        lineNode.style.height = node._h + \"px\";\n      }\n\n      element.appendChild(lineNode);\n    }\n\n    element.style.cssText = style;\n  } //if everything shifts to being position:absolute, the container can collapse in terms of height or width, so fix that here.\n\n\n  if (absolute) {\n    if (origHeight > element.clientHeight) {\n      element.style.height = origHeight - padTopAndBottom + \"px\";\n\n      if (element.clientHeight < origHeight) {\n        //IE8 and earlier use a different box model - we must include padding and borders\n        element.style.height = origHeight + borderTopAndBottom + \"px\";\n      }\n    }\n\n    if (origWidth > element.clientWidth) {\n      element.style.width = origWidth - padLeftAndRight + \"px\";\n\n      if (element.clientWidth < origWidth) {\n        //IE8 and earlier use a different box model - we must include padding and borders\n        element.style.width = origWidth + borderLeftAndRight + \"px\";\n      }\n    }\n  }\n\n  isFlex && (prevInlineDisplay ? element.style.display = prevInlineDisplay : element.style.removeProperty(\"display\"));\n\n  _pushReversed(allChars, charArray);\n\n  words && _pushReversed(allWords, wordArray);\n\n  _pushReversed(allLines, lineArray);\n},\n    _splitRawText = function _splitRawText(element, vars, wordStart, charStart) {\n  var tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n      types = vars.type || vars.split || \"chars,words,lines\",\n      //words = (types.indexOf(\"words\") !== -1),\n  chars = ~types.indexOf(\"chars\"),\n      absolute = _isAbsolute(vars),\n      wordDelimiter = vars.wordDelimiter || \" \",\n      space = wordDelimiter !== \" \" ? \"\" : absolute ? \"&#173; \" : \" \",\n      wordEnd = \"</\" + tag + \">\",\n      wordIsOpen = 1,\n      specialChars = vars.specialChars ? typeof vars.specialChars === \"function\" ? vars.specialChars : _findSpecialChars : null,\n      //specialChars can be an array or a function. For performance reasons, we always set this local \"specialChars\" to a function to which we pass the remaining text and whatever the original vars.specialChars was so that if it's an array, it works with the _findSpecialChars() function.\n  text,\n      splitText,\n      i,\n      j,\n      l,\n      character,\n      hasTagStart,\n      testResult,\n      container = _doc.createElement(\"div\"),\n      parent = element.parentNode;\n\n  parent.insertBefore(container, element);\n  container.textContent = element.nodeValue;\n  parent.removeChild(element);\n  element = container;\n  text = getText(element);\n  hasTagStart = text.indexOf(\"<\") !== -1;\n\n  if (vars.reduceWhiteSpace !== false) {\n    text = text.replace(_multipleSpacesExp, \" \").replace(_stripExp, \"\");\n  }\n\n  if (hasTagStart) {\n    text = text.split(\"<\").join(\"{{LT}}\"); //we can't leave \"<\" in the string, or when we set the innerHTML, it can be interpreted as a node\n  }\n\n  l = text.length;\n  splitText = (text.charAt(0) === \" \" ? space : \"\") + wordStart();\n\n  for (i = 0; i < l; i++) {\n    character = text.charAt(i);\n\n    if (specialChars && (testResult = specialChars(text.substr(i), vars.specialChars))) {\n      // look for any specialChars that were declared. Remember, they can be passed in like {specialChars:[\"मी\", \"पा\", \"है\"]} or a function could be defined instead. Either way, the function should return the number of characters that should be grouped together for this \"character\".\n      character = text.substr(i, testResult || 1);\n      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n      i += testResult - 1;\n    } else if (character === wordDelimiter && text.charAt(i - 1) !== wordDelimiter && i) {\n      splitText += wordIsOpen ? wordEnd : \"\";\n      wordIsOpen = 0;\n\n      while (text.charAt(i + 1) === wordDelimiter) {\n        //skip over empty spaces (to avoid making them words)\n        splitText += space;\n        i++;\n      }\n\n      if (i === l - 1) {\n        splitText += space;\n      } else if (text.charAt(i + 1) !== \")\") {\n        splitText += space + wordStart();\n        wordIsOpen = 1;\n      }\n    } else if (character === \"{\" && text.substr(i, 6) === \"{{LT}}\") {\n      splitText += chars ? charStart() + \"{{LT}}\" + \"</\" + tag + \">\" : \"{{LT}}\";\n      i += 5;\n    } else if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n      //special emoji characters use 2 or 4 unicode characters that we must keep together.\n      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n      splitText += chars && character !== \" \" ? charStart() + text.substr(i, j) + \"</\" + tag + \">\" : text.substr(i, j);\n      i += j - 1;\n    } else {\n      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n    }\n  }\n\n  element.outerHTML = splitText + (wordIsOpen ? wordEnd : \"\");\n  hasTagStart && _swapText(parent, \"{{LT}}\", \"<\"); //note: don't perform this on \"element\" because that gets replaced with all new elements when we set element.outerHTML.\n},\n    _split = function _split(element, vars, wordStart, charStart) {\n  var children = _toArray(element.childNodes),\n      l = children.length,\n      absolute = _isAbsolute(vars),\n      i,\n      child;\n\n  if (element.nodeType !== 3 || l > 1) {\n    vars.absolute = false;\n\n    for (i = 0; i < l; i++) {\n      child = children[i];\n      child._next = child._isFirst = child._parent = child._wordEnd = null;\n\n      if (child.nodeType !== 3 || /\\S+/.test(child.nodeValue)) {\n        if (absolute && child.nodeType !== 3 && _getComputedStyle(child).display === \"inline\") {\n          //if there's a child node that's display:inline, switch it to inline-block so that absolute positioning works properly (most browsers don't report offsetTop/offsetLeft properly inside a <span> for example)\n          child.style.display = \"inline-block\";\n          child.style.position = \"relative\";\n        }\n\n        child._isSplit = true;\n\n        _split(child, vars, wordStart, charStart); //don't split lines on child elements\n\n      }\n    }\n\n    vars.absolute = absolute;\n    element._isSplit = true;\n    return;\n  }\n\n  _splitRawText(element, vars, wordStart, charStart);\n};\n\nexport var SplitText = /*#__PURE__*/function () {\n  function SplitText(element, vars) {\n    _coreInitted || _initCore();\n    this.elements = _toArray(element);\n    this.chars = [];\n    this.words = [];\n    this.lines = [];\n    this._originals = [];\n    this.vars = vars || {};\n    _bonusValidated && this.split(vars);\n  }\n\n  var _proto = SplitText.prototype;\n\n  _proto.split = function split(vars) {\n    this.isSplit && this.revert();\n    this.vars = vars = vars || this.vars;\n    this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;\n\n    var i = this.elements.length,\n        tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n        wordStart = _cssClassFunc(vars.wordsClass, tag),\n        charStart = _cssClassFunc(vars.charsClass, tag),\n        origHeight,\n        origWidth,\n        e; //we split in reversed order so that if/when we position:absolute elements, they don't affect the position of the ones after them in the document flow (shifting them up as they're taken out of the document flow).\n\n\n    while (--i > -1) {\n      e = this.elements[i];\n      this._originals[i] = e.innerHTML;\n      origHeight = e.clientHeight;\n      origWidth = e.clientWidth;\n\n      _split(e, vars, wordStart, charStart);\n\n      _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);\n    }\n\n    this.chars.reverse();\n    this.words.reverse();\n    this.lines.reverse();\n    this.isSplit = true;\n    return this;\n  };\n\n  _proto.revert = function revert() {\n    var originals = this._originals;\n\n    if (!originals) {\n      throw \"revert() call wasn't scoped properly.\";\n    }\n\n    this.elements.forEach(function (e, i) {\n      return e.innerHTML = originals[i];\n    });\n    this.chars = [];\n    this.words = [];\n    this.lines = [];\n    this.isSplit = false;\n    return this;\n  };\n\n  SplitText.create = function create(element, vars) {\n    return new SplitText(element, vars);\n  };\n\n  return SplitText;\n}();\nSplitText.version = \"3.9.1\";\nexport { SplitText as default };"],"names":["gsap","_toArray","_win","_isEdge","_coreInitted","_windowExists","window","_getGSAP","registerPlugin","_numExp","_types","rect","circle","ellipse","line","_round","value","Math","round","_parseNum","parseFloat","_parseSingleVal","length","num","indexOf","_getAttributeAsNumber","target","attr","getAttribute","_sqrt","sqrt","_getDistance","x1","y1","x2","y2","scaleX","scaleY","pow","_warn","message","console","warn","_hasNonScalingStroke","_getLength","bbox","points","prevPoint","i","rx","ry","type","tagName","toLowerCase","style","getScreenCTM","a","b","d","c","getBBox","e","_ref","x","y","width","height","abs","strokeDasharray","getTotalLength","match","push","PI","_getPosition","cs","getComputedStyle","dash","offset","strokeDashoffset","substr","_initCore","document","utils","toArray","navigator","userAgent","DrawSVGPlugin","version","name","register","core","init","tween","index","targets","start","end","this","_style","_target","defaultStart","s","undefined","_parse","_length","_dash","_offset","_dashPT","add","_offsetPT","strokeLinecap","strokeLinejoin","strokeMiterlimit","_live","_nowrap","_props","render","ratio","data","lengthRatio","pt","_pt","r","_next","getLength","getPosition","_svgPathExp","_numbersExp","_scientific","_selectorExp","_DEG2RAD","_sin","sin","_cos","cos","_abs","_isString","atan2","_isNumber","_roundingNum","reverseSegment","segment","reverse","reversed","_typeAttrs","element","swap","path","rcirc","rycirc","w","h","x3","x4","x5","x6","y3","y4","y5","y6","circ","ignore","createElementNS","slice","call","attributes","nodeName","setAttributeNS","nodeValue","_createPath","attrs","props","split","obj","_attrToObj","join","cx","cy","shift","setAttribute","rawPathToString","_gsRawPath","stringToRawPath","parentNode","insertBefore","removeChild","arcToSegment","lastX","lastY","angle","largeArcFlag","sweepFlag","angleRad","cosAngle","sinAngle","TWOPI","dx2","dy2","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","ux","uy","vx","vy","temp","angleStart","acos","angleExtent","isNaN","segments","ceil","rawPath","angleIncrement","controlLength","ma","mb","mc","md","j","command","isRelative","startX","startY","difX","difY","beziers","prevCommand","flag1","flag2","replace","m","n","relativeX","relativeY","twoThirds","elements","errorMessage","sx","sy","ex","ey","log","toUpperCase","closed","charAt","pop","totalPoints","sl","result","l","_lastLinkedAnchor","PluginClass","_isFunction","_PI","_2PI","_angleMin","_angleMax","_bigNum","_commands","_log","_getAverageXY","_getSize","xMax","xMin","yMax","yMin","centerX","centerY","size","_getTotalSize","samplesPerBezier","k","t","inv","inc","left","top","_sortByComplexity","_sortBySize","sizeA","sizeB","_offsetSegment","shapeIndex","wrap","_getTotalMovement","sb","eb","offsetX","offsetY","_getClosestShapeIndex","checkReverse","copy","sCenter","eCenter","min","minIndex","_getClosestAnchor","dx","dy","closestDistance","closestX","closestY","_getClosestSegment","bezier","pool","startIndex","sortRatio","minSize","splice","_subdivideSegmentQty","quantity","ax","ay","cp1x","cp1y","cp2x","cp2y","bx","by","tally","newPointsPerSegment","floor","_equalizeSegmentQuantity","map","fillSafe","dif","longer","shorter","added","sortMethod","shapeIndices","sort","_pathFilter","precompile","_equalizePointQuantity","factor","nextX","nextY","max","toFixed","_pointsFilter","startNums","endNums","_populateSmoothData","tolerance","smooth","a2","isSmooth","smoothData","limit","_parseOriginFactors","v","trim","_morphMessage","_tweenRotation","linkedPT","angleDif","_short","so","_origin","eo","_eOrigin","sa","ca","_anchorPT","cl","required","plugins","morphSVG","prototype","MorphSVGPlugin","rawVars","Plugin","p","shape","isPoly","startSmooth","endSmooth","startSeg","endSeg","precompiled","sData","eData","originFactors","useRotation","nodeType","fill","fillRule","origins","origin","prop","forcePath","test","getAttributeNS","_parseShape","defaultMap","_prop","_render","defaultRender","_apply","updateTarget","defaultUpdateTarget","_rnd","precision","_tween","defaultType","smoothTolerance","_rawPath","_controlPT","l1s","l1c","l2s","l2c","text","parseInt","_offsetPoints","_buildPointsFilter","endProp","easeInOut","controlPT","anchorPT","rnd","kill","property","getRawPath","querySelector","_gsPath","_dirty","normalizeStrings","shape1","shape2","pathFilter","pointsFilter","getTotalSize","equalizeSegmentQuantity","convertToPath","emojiExp","getText","textContent","firstChild","nextSibling","_doc","_stripExp","_multipleSpacesExp","_getComputedStyle","_isArray","Array","isArray","_slice","leaveStrings","querySelectorAll","_isAbsolute","vars","position","absolute","_findSpecialChars","chars","_cssClassFunc","cssClass","tag","iterate","_swapText","oldText","newText","_pushReversed","merge","_isBeforeWordDelimiter","root","wordDelimiter","next","_parent","_deWordify","child","children","childNodes","_isSplit","previousSibling","_getStyleAsNumber","computedStyle","_setPositionsAfterSplit","allChars","allWords","allLines","origWidth","origHeight","node","nodes","isChild","curLine","addWordSpaces","lineNode","lineWidth","paddingLeft","lineOffsetY","borderTopAndBottom","borderLeftAndRight","padTopAndBottom","padLeftAndRight","lineThreshold","textAlign","charArray","wordArray","lineArray","span","types","lines","words","linesClass","iterateLine","spaceNodesToRemove","isFlex","display","prevInlineDisplay","getElementsByTagName","offsetTop","_x","offsetLeft","_y","_w","offsetWidth","_h","offsetHeight","_wordEnd","appendChild","_isFirst","createTextNode","innerHTML","createElement","offsetParent","cssText","className","String","fromCharCode","clientHeight","clientWidth","removeProperty","_splitRawText","wordStart","charStart","splitText","character","hasTagStart","testResult","space","wordEnd","wordIsOpen","specialChars","container","parent","reduceWhiteSpace","charCodeAt","outerHTML","_split","SplitText","_originals","_proto","isSplit","revert","wordsClass","charsClass","originals","forEach","create"],"sourceRoot":""}
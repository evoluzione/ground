{"version":3,"file":"826.bundle.min.js","mappings":"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","sources":["webpack://ground/./node_modules/photoswipe/dist/photoswipe.esm.js"],"sourcesContent":["/*!\r\n  * PhotoSwipe 5.2.8 - https://photoswipe.com\r\n  * (c) 2022 Dmytro Semenov\r\n  */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport { PhotoSwipe as default };\r\n//# sourceMappingURL=photoswipe.esm.js.map\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","calculateSize","transformOrigin","load","appendHeavy","updateContentSize","innerHTML","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","supportsTouch","navigator","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_firstFrameTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","initialVelocity","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","secondaryIsHigher","imageClickAction","PhotoSwipeEvent","details","assign","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","image","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","isDecoding","decode","then","appendImage","catch","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","off","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","finally","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","getItemData","createContentFromData","zoomLevel","ceil","lazyLoadData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}
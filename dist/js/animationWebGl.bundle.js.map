{"version":3,"file":"animationWebGl.bundle.js","mappings":"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","sources":["webpack://ground/./js/utilities/observer.js","webpack://ground/./js/utilities/paths.js","webpack://ground/./js/webGl/animationWebGl.js"],"sourcesContent":["/**\n * Observe DOM Node Changes\n * @param {string} triggers - Selectors\n * @param {requestCallback} cb - The callback that handles the response.\n *\n * @see https://stackoverflow.com/questions/56608748/how-to-use-queryselectorall-on-the-added-nodes-in-a-mutationobserver\n */\nexport function initObserver(triggers, callback) {\n\tconst filterSelector = (selector, mutationsList) => {\n\t\t// We can't create a NodeList; let's use a Set\n\t\tconst result = new Set();\n\t\t// Loop through the mutationsList...\n\t\tfor (const { addedNodes } of mutationsList) {\n\t\t\tfor (const node of addedNodes) {\n\t\t\t\t// console.log(node);\n\n\t\t\t\t// If it's an element...\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\t// Add it if it's a match\n\t\t\t\t\tif (node.matches(selector)) {\n\t\t\t\t\t\tresult.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tfor (const entry of node.querySelectorAll(selector)) {\n\t\t\t\t\t\tresult.add(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* mutationsList.map((e) => e.addedNodes).forEach((n) => {\n\t\t\t\tif (n.nodeType === 1) {\n\t\t\t\t\tif (n.matches(selector)) {\n\t\t\t\t\t\tresult.add(n);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tn.querySelectorAll(selector).forEach((c) => result.add(c));\n\t\t\t\t}\n\t\t\t}); */\n\n\t\treturn [...result]; // Result is an array, or just return the set\n\t};\n\n\tconst observerCallback = (mutationsList) => {\n\t\tconst result = filterSelector(triggers, mutationsList);\n\t\tresult.forEach((element) => {\n\t\t\tcallback(element);\n\t\t});\n\t};\n\n\tconst config = {\n\t\tchildList: true,\n\t\tattributes: false,\n\t\tcharacterData: false,\n\t\tsubtree: true\n\t};\n\tconst observer = new MutationObserver(observerCallback);\n\tobserver.observe(document.documentElement, config);\n\t//observer.disconnect();\n}\n","/**\n * Paths\n */\n\n/**\n * Get template url\n * @returns {string}\n */\nexport function getTemplateUrl() {\n\treturn document.body.dataset.templateUrl;\n}\n\n/**\n * Get site url\n * @returns {string}\n */\nexport function getSiteUrl() {\n\treturn `${window.location.protocol}//${window.location.host}`;\n}\n\n/**\n * Get current url\n * @returns {string}\n */\nexport function getCurrentUrl() {\n\treturn `${window.location.protocol}//${window.location.host}${window.location.pathname}${window.location.search}`;\n}\n","/* eslint-disable no-unused-vars */\nimport { initObserver } from '../utilities/observer';\nimport { getTemplateUrl } from '../utilities/paths';\nimport * as dat from 'dat.gui';\n\n// Gsap\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\n\n// Three\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\n// Loaders\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n// import { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js';\n\n\nexport default class AnimationWebGl {\n\tconstructor() {\n\t\tthis.element = '[data-scroll=\"js-webgl\"]';\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = { triggers: this.element };\n\t\tthis.updateEvents = this.updateEvents.bind(this);\n\t\twindow.addEventListener('DOMContentLoaded', () => {});\n\t\t// window.addEventListener('LOADER_COMPLETE', () => {\n\t\t\tthis.init();\n\t\t\tthis.initEvents(this.options.triggers);\n\t\t\tinitObserver(this.options.triggers, this.updateEvents);\n\t\t// });\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = document.querySelectorAll(this.element);\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tgsap.utils.toArray(triggers).forEach((element) => {\n\t\t\tthis.startAnimation(element);\n\t\t});\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tthis.startAnimation(target);\n\t}\n\n\t/**\n\t *  Start Animation\n\t */\n\tstartAnimation(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst canvas = item.querySelector('[data-scroll-canvas]');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\t\tconst templateUrl = getTemplateUrl();\n\n\t\t/**\n\t\t * Loaders\n\t\t */\n\t\tconst gltfLoader = new GLTFLoader();\n\t\tconst cubeTextureLoader = new THREE.CubeTextureLoader();\n\n\t\t/**\n\t\t * Base\n\t\t */\n\t\t// Debug\n\t\tconst gui = new dat.GUI();\n\t\tconst debugObject = {};\n\t\tgui.hide();\n\n\t\t// Scene\n\t\tconst scene = new THREE.Scene();\n\n\t\t// Sizes\n\t\tconst sizes = {\n\t\t\twidth: window.innerWidth,\n\t\t\theight: window.innerHeight\n\t\t};\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\t// Update sizes\n\t\t\tsizes.width = window.innerWidth;\n\t\t\tsizes.height = window.innerHeight;\n\n\t\t\t// Update camera\n\t\t\tcamera.aspect = sizes.width / sizes.height;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t// Update renderer\n\t\t\trenderer.setSize(sizes.width, sizes.height);\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\t\t});\n\n\t\t/**\n\t\t * Update all materials\n\t\t */\n\n\t\tlet sceneWireframe = false;\n\n\t\tconst updateAllMaterials = () => {\n\t\t\tscene.traverse((child) => {\n\t\t\t\tif (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n\t\t\t\t\t// child.material.envMap = environmentMap\n\t\t\t\t\tchild.material.envMapIntensity = debugObject.envMapIntensity;\n\t\t\t\t\tchild.material.needsUpdate = true;\n\t\t\t\t\tchild.castShadow = true;\n\t\t\t\t\tchild.receiveShadow = true;\n\n\t\t\t\t\tchild.material.wireframe = sceneWireframe;\n\t\t\t\t\t// child.material.depthTest = true\n\t\t\t\t\t// child.material.opacity = 0.3;\n\t\t\t\t\t// child.material.transparent = true\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Environment map\n\t\t */\n\t\tconst environmentMap = cubeTextureLoader.load([\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/px.jpg',\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/nx.jpg',\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/py.jpg',\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/ny.jpg',\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/pz.jpg',\n\t\t\ttemplateUrl + '/img/textures/environmentMaps/2/nz.jpg'\n\t\t]);\n\t\tenvironmentMap.encoding = THREE.sRGBEncoding;\n\t\t// scene.background = environmentMap\n\t\tscene.environment = environmentMap;\n\n\t\tdebugObject.envMapIntensity = 5;\n\t\tgui.add(debugObject, 'envMapIntensity').min(0).max(10).step(0.001).onChange(updateAllMaterials);\n\n\t\tlet mixer = null;\n\t\t/**\n\t\t * Models\n\t\t */\n\n\t\tgltfLoader.load(templateUrl + '/img/models/iphone_12_pro/scene.gltf', (gltf) => {\n\t\t\t// Animate\n\t\t\tmixer = new THREE.AnimationMixer(gltf.scene);\n\t\t\tif (gltf.animations[0]) {\n\t\t\t\tconst action = mixer.clipAction(gltf.animations[0]);\n\t\t\t\taction.play();\n\t\t\t}\n\n\t\t\tgltf.scene.scale.set(0.04, 0.04, 0.04);\n\t\t\tgltf.scene.position.set(0, -4, 0);\n\t\t\tgltf.scene.rotation.y = Math.PI * 0.25;\n\t\t\tgltf.scene.rotation.z = Math.PI * 0.2;\n\n\t\t\tscene.add(gltf.scene);\n\n\t\t\tgui.add(gltf.scene.rotation, 'y').min(-Math.PI).max(Math.PI).step(0.001).name('rotation Y');\n\t\t\tgui.add(gltf.scene.rotation, 'z').min(-Math.PI).max(Math.PI).step(0.001).name('rotation Z');\n\n\t\t\tupdateAllMaterials();\n\t\t\tscrollAnimate(gltf.scene);\n\t\t});\n\n\t\t/**\n\t\t * Lights\n\t\t */\n\t\tconst directionalLight = new THREE.DirectionalLight('#ffffff', 3);\n\t\tdirectionalLight.position.set(0.25, 3, -2.25);\n\t\tdirectionalLight.castShadow = true;\n\t\tdirectionalLight.shadow.camera.far = 15;\n\t\tdirectionalLight.shadow.mapSize.set(1024, 1024);\n\t\tscene.add(directionalLight);\n\n\t\t// const directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera)\n\t\t// scene.add(directionalLightCameraHelper)\n\n\t\tgui.add(directionalLight, 'intensity').min(0).max(10).step(0.001).name('lightIntensity');\n\t\tgui.add(directionalLight.position, 'x').min(-5).max(5).step(0.001).name('lightX');\n\t\tgui.add(directionalLight.position, 'y').min(-5).max(5).step(0.001).name('lightY');\n\t\tgui.add(directionalLight.position, 'z').min(-5).max(5).step(0.001).name('lightZ');\n\n\t\t/**\n\t\t * Objects\n\t\t */\n\t\t// Material\n\t\tconst material = new THREE.MeshStandardMaterial();\n\t\tmaterial.roughness = 0.4;\n\t\tmaterial.wireframe = false;\n\n\t\tconst cube = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), material);\n\n\t\tcube.receiveShadow = true;\n\t\tcube.wireframe = true;\n\t\tscene.add(cube);\n\n\t\t// Debug\n\t\t// gui.add(cube.rotation, 'x').min(0).max(100).step(1).name('Cube Rotation')\n\t\tgui.add(cube, 'visible');\n\t\tgui.add(material, 'wireframe');\n\t\tgui.addColor;\n\n\t\t/**\n\t\t * Camera\n\t\t */\n\t\t// Base camera\n\t\tconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\n\t\tcamera.position.set(4, 1, -4);\n\t\tscene.add(camera);\n\n\t\t//Orbit Controls\n\t\tconst controls = new OrbitControls(camera, canvas);\n\t\tcontrols.enableDamping = true;\n\t\tcontrols.enableZoom = false;\n\t\tcontrols.enablePan = false;\n\t\tcontrols.autoRotate = false;\n\t\tcontrols.enabled = true;\n\n\t\t/**\n\t\t * Renderer\n\t\t */\n\t\tconst renderer = new THREE.WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\t// alpha: true,\n\t\t\tantialias: true\n\t\t});\n\t\trenderer.setSize(sizes.width, sizes.height);\n\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\t\trenderer.physicallyCorrectLights = true;\n\t\trenderer.outputEncoding = THREE.sRGBEncoding;\n\t\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 3;\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\t\tgui.add(renderer, 'toneMapping', {\n\t\t\tNo: THREE.NoToneMapping,\n\t\t\tLinear: THREE.LinearToneMapping,\n\t\t\tReinhard: THREE.ReinhardToneMapping,\n\t\t\tCineon: THREE.CineonToneMapping,\n\t\t\tACESFilmic: THREE.ACESFilmicToneMapping\n\t\t}).onFinishChange(() => {\n\t\t\trenderer.toneMapping = Number(renderer.toneMapping);\n\t\t\tupdateAllMaterials();\n\t\t});\n\n\t\tgui.add(renderer, 'toneMappingExposure').min(0).max(10).step(0.001);\n\n\t\t/**\n\t\t * Animate\n\t\t */\n\t\tconst clock = new THREE.Clock();\n\t\tlet previousTime = 0;\n\n\t\tconst tick = () => {\n\t\t\tconst elapsedTime = clock.getElapsedTime();\n\t\t\tconst deltaTime = elapsedTime - previousTime;\n\t\t\tpreviousTime = elapsedTime;\n\n\t\t\t// Update controls\n\t\t\tcontrols.update();\n\n\t\t\t//Update mixer\n\t\t\tif (mixer) {\n\t\t\t\tmixer.update(deltaTime);\n\t\t\t}\n\n\t\t\t// Render\n\t\t\trenderer.render(scene, camera);\n\n\t\t\t// Call tick again on the next frame\n\t\t\twindow.requestAnimationFrame(tick);\n\t\t};\n\n\t\ttick();\n\n\t\t// console.log(scene.children)\n\t\t// console.log(scene.children.PerspectiveCamera)\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: '+=200%',\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tpin: true,\n\t\t\t\ttoggleActions: 'play none play reverse'\n\t\t\t}\n\t\t});\n\n\t\tconst scrollAnimate = (model) => {\n\t\t\ttl.from(cube.rotation, { z: 4 })\n\t\t\t\t// .from(camera.position, { y: 4, x: 4 })\n\t\t\t\t.from(model.rotation, { x: 0, y: -0.4, z: 0 });\n\t\t};\n\t}\n}\n"],"names":["initObserver","triggers","callback","MutationObserver","mutationsList","selector","result","Set","addedNodes","node","nodeType","matches","add","querySelectorAll","entry","filterSelector","forEach","element","observe","document","documentElement","childList","attributes","characterData","subtree","getTemplateUrl","body","dataset","templateUrl","getSiteUrl","window","location","protocol","host","gsap","ScrollTrigger","AnimationWebGl","this","DOM","html","options","updateEvents","bind","addEventListener","init","initEvents","startAnimation","target","item","querySelector","canvas","targetScrub","parseInt","scrollScrub","gltfLoader","GLTFLoader","cubeTextureLoader","THREE","gui","dat","debugObject","hide","scene","sizes","width","innerWidth","height","innerHeight","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","updateAllMaterials","traverse","child","material","envMapIntensity","needsUpdate","castShadow","receiveShadow","wireframe","environmentMap","load","encoding","environment","max","step","onChange","mixer","gltf","animations","clipAction","play","scale","set","position","rotation","y","PI","z","name","scrollAnimate","directionalLight","shadow","far","mapSize","roughness","cube","addColor","controls","OrbitControls","enableDamping","enableZoom","enablePan","autoRotate","enabled","antialias","physicallyCorrectLights","outputEncoding","toneMapping","toneMappingExposure","shadowMap","type","No","Linear","Reinhard","Cineon","ACESFilmic","onFinishChange","Number","clock","previousTime","tick","elapsedTime","getElapsedTime","deltaTime","update","render","requestAnimationFrame","tl","scrollTrigger","trigger","start","end","scrub","pin","toggleActions","model","from","x"],"sourceRoot":""}
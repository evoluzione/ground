{"version":3,"file":"animationHorizontalScrollSection.bundle.js","mappings":"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","sources":["webpack://ground/./js/animations/animationDefault.js","webpack://ground/./js/animations/animationHorizontalScrollSection.js","webpack://ground/./node_modules/deepmerge/dist/cjs.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// import { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element;\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\t// this.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refresh', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_OUT', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('resize', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('NAVIGATE_IN', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_END', () => {});\n\n\t\t//  window.addEventListener('LOADER_COMPLETE', () => {\n\t\tthis.init();\n\t\tthis.initEvents(this.options.triggers);\n\t\t// initObserver(this.options.triggers, this.updateEvents);\n\t\t//  });\t\t\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = this.element;\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tthis.fireAnimation(triggers);\n\n\t\t// gsap.utils.toArray(triggers).forEach((element) => {\n\t\t// \tif (element.dataset.scroll === 'js-split-text') {\n\t\t// \t}  else {\n\t\t// \t\tthis.animationDefault(target);\n\t\t// \t}\n\t\t// });\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\t\t\tthis.fireAnimation(target);\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * Fire the animation\n\t * @param {node} item \n\t */\n\tfireAnimation(item) {\n\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none'\n\t\t\t// markers: true,\n\t\t\t// once: true,\n\t\t});\n\t}\n}\n","/* eslint-disable no-unused-vars */\nimport AnimationDefault from './animationDefault';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationHorizontalScrollSection extends AnimationDefault {\n\t\n\n\tconstructor(element, options) {\n\t\tsuper(element, options);\n\t\tthis.element = element || '[data-scroll=\"js-horizontal-scroll-section\"]';\n\t}\n\n\tfireAnimation(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst section = item.querySelectorAll('[data-scroll-section]');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst sections = gsap.utils.toArray(section);\n\n\t\tlet maxWidth = 0;\n\n\t\tconst getMaxWidth = () => {\n\t\t\tmaxWidth = 0;\n\t\t\tsections.forEach((section) => {\n\t\t\t\tmaxWidth += section.offsetWidth;\n\t\t\t});\n\t\t};\n\t\tgetMaxWidth();\n\t\tScrollTrigger.addEventListener('refreshInit', getMaxWidth);\n\n\t\tgsap.to(sections, {\n\t\t\tx: () => `-${maxWidth - window.innerWidth}`,\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tpin: true,\n\t\t\t\tpinReparent: true,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: () => `+=${maxWidth}`,\n\t\t\t\tinvalidateOnRefresh: true\n\t\t\t}\n\t\t});\n\n\t\t// ADD SKEW\n\t\t// let proxy = { skew: 0 },\n\t\t// \tskewSetter = gsap.quickSetter(section, 'skewX', 'deg'), // fast\n\t\t// \tclamp = gsap.utils.clamp(-10, 10) // don't let the skew go beyond [X] degrees.\n\t\t// END SKEW\n\n\t\tsections.forEach((sct, i) => {\n\t\t\tScrollTrigger.create({\n\t\t\t\ttrigger: sct,\n\t\t\t\tstart: () =>\n\t\t\t\t\t'top top-=' +\n\t\t\t\t\t(sct.offsetLeft - window.innerWidth / 2) * (maxWidth / (maxWidth - window.innerWidth)),\n\t\t\t\tend: () => '+=' + sct.offsetWidth * (maxWidth / (maxWidth - window.innerWidth)),\n\t\t\t\ttoggleClass: { targets: sct, className: 'active' }\n\t\t\t\t// ADD SKEW\n\t\t\t\t// onUpdate: (self) => {\n\t\t\t\t// \tlet skew = clamp(self.getVelocity() / -500)\n\t\t\t\t// \t// only do something if the skew is MORE severe. Remember, we're always tweening back to 0, so if the user slows their scrolling quickly, it's more natural to just let the tween handle that smoothly rather than jumping to the smaller skew.\n\t\t\t\t// \tif (Math.abs(skew) > Math.abs(proxy.skew)) {\n\t\t\t\t// \t\tproxy.skew = skew\n\t\t\t\t// \t\tgsap.to(proxy, {\n\t\t\t\t// \t\t\tskew: 0,\n\t\t\t\t// \t\t\tduration: 0.5,\n\t\t\t\t// \t\t\tease: 'circ',\n\t\t\t\t// \t\t\toverwrite: true,\n\t\t\t\t// \t\t\tonUpdate: () => skewSetter(proxy.skew),\n\t\t\t\t// \t\t})\n\t\t\t\t// \t}\n\t\t\t\t// },\n\t\t\t\t// END SKEW\n\t\t\t});\n\t\t});\n\n\t\t// SKEW: make the right edge \"stick\" to the scroll bar. force3D: true improves performance\n\t\t// gsap.set(section, { transformOrigin: 'center center', force3D: true })\n\t\t// END SKEW\n\t}\n}\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n"],"names":["gsap","ScrollTrigger","AnimationDefault","element","options","this","defaults","triggers","DOM","html","document","documentElement","body","deepmerge","init","initEvents","fireAnimation","target","setTimeout","item","targetClass","dataset","scroll","trigger","start","toggleClass","toggleActions","AnimationHorizontalScrollSection","querySelector","section","querySelectorAll","targetScrub","parseInt","scrollScrub","sections","maxWidth","getMaxWidth","forEach","offsetWidth","x","window","innerWidth","ease","scrollTrigger","pin","pinReparent","scrub","end","invalidateOnRefresh","sct","i","offsetLeft","targets","className","isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","clone","val","Array","isArray","defaultArrayMerge","source","concat","map","getKeys","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","arrayMerge","sourceIsArray","destination","key","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","mergeObject","all","array","Error","reduce","prev","next","deepmerge_1","module","exports"],"sourceRoot":""}
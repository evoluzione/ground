{"version":3,"file":"animationBatch.bundle.js","mappings":"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","sources":["webpack://ground/./js/animations/animationBatch.js","webpack://ground/./js/animations/animationDefault.js","webpack://ground/./node_modules/deepmerge/dist/cjs.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport AnimationDefault from './animationDefault';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationBatch extends AnimationDefault {\n\t\n\tconstructor(element, options) {\n\t\tsuper(element, options);\n\t\tthis.element = element || '[data-scroll=\"js-batch\"]';\n\t}\n\n\tfireAnimation(item) {\n\t\tconst target = item.querySelectorAll('[data-scroll-target]');\n\n\t\t// gsap.set(target, { y: 100, opacity: 0 });\n\n\t\tScrollTrigger.batch(target, {\n\t\t\tinterval: 0.3, // time window (in seconds) for batching to occur.\n\t\t\tbatchMax: 3, // maximum batch size (targets)\n\t\t\tonEnter: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeave: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true }),\n\t\t\tonEnterBack: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeaveBack: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true })\n\t\t});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () =>\n\t\t// \tgsap.set(target, { y: 0 })\n\t\t// )\n\t}\n}\n","/* eslint-disable no-unused-vars */\n// import { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element;\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\t// this.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refresh', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_OUT', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('resize', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('NAVIGATE_IN', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_END', () => {});\n\n\t\t//  window.addEventListener('LOADER_COMPLETE', () => {\n\t\tthis.init();\n\t\tthis.initEvents(this.options.triggers);\n\t\t// initObserver(this.options.triggers, this.updateEvents);\n\t\t//  });\t\t\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = this.element;\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tthis.fireAnimation(triggers);\n\n\t\t// gsap.utils.toArray(triggers).forEach((element) => {\n\t\t// \tif (element.dataset.scroll === 'js-split-text') {\n\t\t// \t}  else {\n\t\t// \t\tthis.animationDefault(target);\n\t\t// \t}\n\t\t// });\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\t\t\tthis.fireAnimation(target);\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * Fire the animation\n\t * @param {node} item \n\t */\n\tfireAnimation(item) {\n\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none'\n\t\t\t// markers: true,\n\t\t\t// once: true,\n\t\t});\n\t}\n}\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n"],"names":["gsap","ScrollTrigger","AnimationBatch","element","options","item","target","querySelectorAll","interval","batchMax","onEnter","batch","autoAlpha","stagger","overwrite","onLeave","onEnterBack","onLeaveBack","AnimationDefault","this","defaults","triggers","DOM","html","document","documentElement","body","deepmerge","init","initEvents","fireAnimation","setTimeout","targetClass","dataset","scroll","trigger","start","toggleClass","toggleActions","isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","clone","val","Array","isArray","defaultArrayMerge","source","concat","map","getKeys","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","arrayMerge","sourceIsArray","destination","forEach","key","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","mergeObject","all","array","Error","reduce","prev","next","deepmerge_1","module","exports"],"sourceRoot":""}
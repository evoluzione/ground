{"version":3,"file":"ground-animationBgColor.bundle.js","mappings":"wkCAKAA,EAAAA,GAAAA,eAAoBC,EAAAA,G,IAECC,EAAAA,SAAAA,I,urBAKpB,WAAYC,EAASC,GAAS,a,4FAAA,UAC7B,cAAMD,EAASC,IACVD,QAAUA,GAAW,8BAFG,E,0CAK9B,SAAcE,GACb,IAAMC,EAASC,SAASC,KAClBC,EAAcJ,EAAKK,QAAQC,cAEtBX,EAAAA,GAAAA,SAAc,CACxBY,cAAe,CACdC,QAASR,EACTS,MAAO,EACPC,cAAe,2BAIdC,GAAGV,EAAQ,CACbW,gBAAiBR,EACjBS,KAAM,gB,sEAxBYhB,CAAyBiB,EAAAA,U,kRCA9CnB,EAAAA,GAAAA,eAAoBC,EAAAA,G,IAECkB,EAAAA,WAKpB,WAAYhB,EAASC,I,4FAAS,SAC7BgB,KAAKjB,QAAUA,EACfiB,KAAKC,SAAW,CACfC,SAAUF,KAAKjB,SAEhBiB,KAAKG,IAAM,CACVC,KAAMjB,SAASkB,gBACfjB,KAAMD,SAASC,MAEhBY,KAAKhB,QAAUA,EAAUsB,GAAAA,CAAUN,KAAKC,SAAUjB,GAAWgB,KAAKC,SA4BlED,KAAKO,OACLP,KAAKQ,WAAWR,KAAKhB,QAAQkB,U,yCAQ9B,WACCF,KAAKG,IAAIpB,QAAUiB,KAAKjB,U,wBAOzB,SAAWmB,GACVF,KAAKS,cAAcP,K,0BAcpB,SAAahB,GAAQ,WACpBc,KAAKO,OACLG,YAAW,WACV,EAAKD,cAAcvB,KACjB,O,2BAOJ,SAAcD,GAEb,IAAM0B,EAAc1B,EAAKK,QAAQsB,OAEjC/B,EAAAA,EAAAA,OAAqB,CACpBY,QAASR,EACT4B,MAAO,WACPC,YAAaH,EACbhB,cAAe,sBACfoB,MAAM,S,sEA9FYhB","sources":["webpack://ground/./js/animations/animationBgColor.js","webpack://ground/./js/animations/animationDefault.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport AnimationDefault from './animationDefault';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationBgColor extends AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tsuper(element, options);\n\t\tthis.element = element || '[data-scroll=\"js-bg-color\"]';\n\t}\n\n\tfireAnimation(item) {\n\t\tconst target = document.body;\n\t\tconst targetColor = item.dataset.scrollBgcolor;\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: item,\n\t\t\t\tscrub: 1,\n\t\t\t\ttoggleActions: 'play reset play reset'\n\t\t\t}\n\t\t});\n\n\t\ttl.to(target, {\n\t\t\tbackgroundColor: targetColor,\n\t\t\tease: 'power1'\n\t\t});\n\t}\n\n}\n","/* eslint-disable no-unused-vars */\n// import { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element;\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\t// this.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refresh', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_OUT', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('resize', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('NAVIGATE_IN', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_END', () => {});\n\n\t\t//  window.addEventListener('LOADER_COMPLETE', () => {\n\t\tthis.init();\n\t\tthis.initEvents(this.options.triggers);\n\t\t// initObserver(this.options.triggers, this.updateEvents);\n\t\t//  });\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = this.element;\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tthis.fireAnimation(triggers);\n\n\t\t// gsap.utils.toArray(triggers).forEach((element) => {\n\t\t// \tif (element.dataset.scroll === 'js-split-text') {\n\t\t// \t}  else {\n\t\t// \t\tthis.animationDefault(target);\n\t\t// \t}\n\t\t// });\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\t\t\tthis.fireAnimation(target);\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * Fire the animation\n\t * @param {node} item\n\t */\n\tfireAnimation(item) {\n\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none',\n\t\t\tonce: true\n\t\t\t// markers: true,\n\t\t});\n\t}\n}\n"],"names":["gsap","ScrollTrigger","AnimationBgColor","element","options","item","target","document","body","targetColor","dataset","scrollBgcolor","scrollTrigger","trigger","scrub","toggleActions","to","backgroundColor","ease","AnimationDefault","this","defaults","triggers","DOM","html","documentElement","deepmerge","init","initEvents","fireAnimation","setTimeout","targetClass","scroll","start","toggleClass","once"],"sourceRoot":""}
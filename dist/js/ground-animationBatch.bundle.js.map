{"version":3,"file":"ground-animationBatch.bundle.js","mappings":"wkCAKAA,EAAAA,GAAAA,eAAoBC,EAAAA,G,IAECC,EAAAA,SAAAA,I,urBAEpB,WAAYC,EAASC,GAAS,a,4FAAA,UAC7B,cAAMD,EAASC,IACVD,QAAUA,GAAW,2BAFG,E,0CAK9B,SAAcE,GACb,IAAMC,EAASD,EAAKE,iBAAiB,wBAIrCN,EAAAA,EAAAA,MAAoBK,EAAQ,CAC3BE,SAAU,GACVC,SAAU,EACVC,QAAS,SAACC,GAAD,OAAWX,EAAAA,GAAAA,GAAQW,EAAO,CAAEC,UAAW,EAAGC,QAAS,GAAKC,WAAW,KAC5EC,QAAS,SAACJ,GAAD,OAAWX,EAAAA,GAAAA,IAASW,EAAO,CAAEC,UAAW,EAAGE,WAAW,KAC/DE,YAAa,SAACL,GAAD,OAAWX,EAAAA,GAAAA,GAAQW,EAAO,CAAEC,UAAW,EAAGC,QAAS,GAAKC,WAAW,KAChFG,YAAa,SAACN,GAAD,OAAWX,EAAAA,GAAAA,IAASW,EAAO,CAAEC,UAAW,EAAGE,WAAW,Y,sEAlBjDZ,CAAuBgB,EAAAA,U,kRCA5ClB,EAAAA,GAAAA,eAAoBC,EAAAA,G,IAECiB,EAAAA,WAKpB,WAAYf,EAASC,I,4FAAS,SAC7Be,KAAKhB,QAAUA,EACfgB,KAAKC,SAAW,CACfC,SAAUF,KAAKhB,SAEhBgB,KAAKG,IAAM,CACVC,KAAMC,SAASC,gBACfC,KAAMF,SAASE,MAEhBP,KAAKf,QAAUA,EAAUuB,GAAAA,CAAUR,KAAKC,SAAUhB,GAAWe,KAAKC,SA4BlED,KAAKS,OACLT,KAAKU,WAAWV,KAAKf,QAAQiB,U,yCAQ9B,WACCF,KAAKG,IAAInB,QAAUgB,KAAKhB,U,wBAOzB,SAAWkB,GACVF,KAAKW,cAAcT,K,0BAcpB,SAAaf,GAAQ,WACpBa,KAAKS,OACLG,YAAW,WACV,EAAKD,cAAcxB,KACjB,O,2BAOJ,SAAcD,GAEb,IAAM2B,EAAc3B,EAAK4B,QAAQC,OAEjCjC,EAAAA,EAAAA,OAAqB,CACpBkC,QAAS9B,EACT+B,MAAO,WACPC,YAAaL,EACbM,cAAe,6B,sEA7FGpB","sources":["webpack://ground/./js/animations/animationBatch.js","webpack://ground/./js/animations/animationDefault.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport AnimationDefault from './animationDefault';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationBatch extends AnimationDefault {\n\t\n\tconstructor(element, options) {\n\t\tsuper(element, options);\n\t\tthis.element = element || '[data-scroll=\"js-batch\"]';\n\t}\n\n\tfireAnimation(item) {\n\t\tconst target = item.querySelectorAll('[data-scroll-target]');\n\n\t\t// gsap.set(target, { y: 100, opacity: 0 });\n\n\t\tScrollTrigger.batch(target, {\n\t\t\tinterval: 0.3, // time window (in seconds) for batching to occur.\n\t\t\tbatchMax: 3, // maximum batch size (targets)\n\t\t\tonEnter: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeave: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true }),\n\t\t\tonEnterBack: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t\t\tonLeaveBack: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true })\n\t\t});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () =>\n\t\t// \tgsap.set(target, { y: 0 })\n\t\t// )\n\t}\n}\n","/* eslint-disable no-unused-vars */\n// import { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element;\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\t// this.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refresh', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_OUT', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('resize', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('NAVIGATE_IN', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_END', () => {});\n\n\t\t//  window.addEventListener('LOADER_COMPLETE', () => {\n\t\tthis.init();\n\t\tthis.initEvents(this.options.triggers);\n\t\t// initObserver(this.options.triggers, this.updateEvents);\n\t\t//  });\t\t\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = this.element;\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tthis.fireAnimation(triggers);\n\n\t\t// gsap.utils.toArray(triggers).forEach((element) => {\n\t\t// \tif (element.dataset.scroll === 'js-split-text') {\n\t\t// \t}  else {\n\t\t// \t\tthis.animationDefault(target);\n\t\t// \t}\n\t\t// });\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\t\t\tthis.fireAnimation(target);\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * Fire the animation\n\t * @param {node} item \n\t */\n\tfireAnimation(item) {\n\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none'\n\t\t\t// markers: true,\n\t\t\t// once: true,\n\t\t});\n\t}\n}\n"],"names":["gsap","ScrollTrigger","AnimationBatch","element","options","item","target","querySelectorAll","interval","batchMax","onEnter","batch","autoAlpha","stagger","overwrite","onLeave","onEnterBack","onLeaveBack","AnimationDefault","this","defaults","triggers","DOM","html","document","documentElement","body","deepmerge","init","initEvents","fireAnimation","setTimeout","targetClass","dataset","scroll","trigger","start","toggleClass","toggleActions"],"sourceRoot":""}
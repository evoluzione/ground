{"version":3,"file":"animationFlip.bundle.js","mappings":"sXAMAA,EAAAA,GAAAA,eAAqBC,EAAAA,EAAMC,EAAAA,G,IAENC,EAAAA,WAKpB,WAAYC,EAASC,I,4FAAS,SAC7BC,KAAKF,QAAUA,GAAW,cAC1BE,KAAKC,SAAW,CACfC,SAAUF,KAAKF,SAEhBE,KAAKG,IAAM,CACVC,KAAMC,SAASC,gBACfC,KAAMF,SAASE,MAEhBP,KAAKD,QAAUA,EAAUS,GAAAA,CAAUR,KAAKC,SAAUF,GAAWC,KAAKC,SAClED,KAAKS,aAAeT,KAAKS,aAAaC,KAAKV,MAG1CA,KAAKW,OACLX,KAAKY,WAAWZ,KAAKD,QAAQG,WAC7BW,EAAAA,EAAAA,GAAab,KAAKD,QAAQG,SAAUF,KAAKS,c,yCAQ3C,WACCT,KAAKG,IAAIL,QAAUO,SAASS,iBAAiBd,KAAKF,W,wBAOnD,SAAWI,GAAU,WACpBR,EAAAA,GAAAA,MAAAA,QAAmBQ,GAAUa,SAAQ,SAACjB,GACrC,EAAKkB,iBAAiBlB,Q,0BAQxB,SAAamB,GACZjB,KAAKW,OACLX,KAAKgB,iBAAiBlB,W,8BAMvB,SAAiBoB,GAChB,IAAMC,EAAWD,EAAKE,cAAc,oBAC9BC,EAASH,EAAKE,cAAc,kBAC5BE,EAAWJ,EAAKE,cAAc,oBAC9BG,EAAcL,EAAKE,cAAc,uBAEvCxB,EAAAA,EAAAA,OAAiBuB,GACjBvB,EAAAA,EAAAA,OAAiByB,GAEjBE,EAAYC,iBAAiB,SAAS,WACrC,IAAMC,EAAQ9B,EAAAA,EAAAA,SAAc2B,GAE5BA,EAASI,UAAUC,OAAO,UAEtBL,EAASM,gBAAkBT,EAC9BE,EAAOQ,YAAYP,GAEnBH,EAASU,YAAYP,GAGtB3B,EAAAA,EAAAA,KAAU8B,EAAO,CAChBK,SAAU,GACVC,OAAO,EACPC,UAAU,EACVC,KAAM,yB,sEA9EWpC,I,8hCCDd,SAASgB,EAAaX,EAAUgC,GAiDrB,IAAIC,kBAbI,SAACC,IAnCH,SAACC,EAAUD,GAEjC,IAFmD,E,EAE7CE,EAAS,IAAIC,IAFgC,IAItBH,GAJsB,IAInD,2BAA4C,mBAA/BI,YAA+B,IAC3C,2BAA+B,KAApBC,EAAoB,QAI9B,GAAsB,IAAlBA,EAAKC,SAAgB,CAEpBD,EAAKE,QAAQN,IAChBC,EAAOM,IAAIH,GAHY,UAMJA,EAAK3B,iBAAiBuB,IANlB,IAMxB,2BAAqD,KAA1CQ,EAA0C,QACpDP,EAAOM,IAAIC,IAPY,iCALiB,gCAJO,8BAgCnD,O,+CAAWP,I,sSAIIQ,CAAe5C,EAAUkC,GACjCrB,SAAQ,SAACjB,GACfoC,EAASpC,SAWFiD,QAAQ1C,SAASC,gBAPX,CACd0C,WAAW,EACXC,YAAY,EACZC,eAAe,EACfC,SAAS,I","sources":["webpack://ground/./js/animations/animationFlip.js","webpack://ground/./js/utilities/observer.js"],"sourcesContent":["import { initObserver } from '../utilities/observer';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { Draggable } from 'gsap/all';\nimport { Flip } from 'gsap/all';\n\ngsap.registerPlugin( Flip, Draggable);\n\nexport default class AnimationFlip {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element || '[data-flip]';\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\tthis.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('LOADER_COMPLETE', () => {\n\t\t\tthis.init();\n\t\t\tthis.initEvents(this.options.triggers);\n\t\t\tinitObserver(this.options.triggers, this.updateEvents);\n\t\t// });\n\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = document.querySelectorAll(this.element);\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tgsap.utils.toArray(triggers).forEach((element) => {\n\t\t\tthis.defaultAnimation(element);\n\t\t});\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tthis.defaultAnimation(element);\n\t}\n\n\t/**\n\t * default Animation\n\t */\n\tdefaultAnimation(item) {\n\t\tconst flipFrom = item.querySelector('[data-flip-from]');\n\t\tconst flipTo = item.querySelector('[data-flip-to]');\n\t\tconst flipItem = item.querySelector('[data-flip-item]');\n\t\tconst flipTrigger = item.querySelector('[data-flip-trigger]');\n\n\t\tDraggable.create(flipFrom);\n\t\tDraggable.create(flipTo);\n\n\t\tflipTrigger.addEventListener('click', () => {\n\t\t\tconst state = Flip.getState(flipItem);\n\n\t\t\tflipItem.classList.toggle('active');\n\n\t\t\tif (flipItem.parentElement === flipFrom) {\n\t\t\t\tflipTo.appendChild(flipItem);\n\t\t\t} else {\n\t\t\t\tflipFrom.appendChild(flipItem);\n\t\t\t}\n\n\t\t\tFlip.from(state, {\n\t\t\t\tduration: 0.6,\n\t\t\t\tscale: true,\n\t\t\t\tabsolute: true,\n\t\t\t\tease: 'power3.inOut'\n\t\t\t});\n\t\t});\n\t}\n}\n","/**\n * Observe DOM Node Changes\n * @param {string} triggers - Selectors\n * @param {requestCallback} cb - The callback that handles the response.\n *\n * @see https://stackoverflow.com/questions/56608748/how-to-use-queryselectorall-on-the-added-nodes-in-a-mutationobserver\n */\nexport function initObserver(triggers, callback) {\n\tconst filterSelector = (selector, mutationsList) => {\n\t\t// We can't create a NodeList; let's use a Set\n\t\tconst result = new Set();\n\t\t// Loop through the mutationsList...\n\t\tfor (const { addedNodes } of mutationsList) {\n\t\t\tfor (const node of addedNodes) {\n\t\t\t\t// console.log(node);\n\n\t\t\t\t// If it's an element...\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\t// Add it if it's a match\n\t\t\t\t\tif (node.matches(selector)) {\n\t\t\t\t\t\tresult.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tfor (const entry of node.querySelectorAll(selector)) {\n\t\t\t\t\t\tresult.add(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* mutationsList.map((e) => e.addedNodes).forEach((n) => {\n\t\t\t\tif (n.nodeType === 1) {\n\t\t\t\t\tif (n.matches(selector)) {\n\t\t\t\t\t\tresult.add(n);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tn.querySelectorAll(selector).forEach((c) => result.add(c));\n\t\t\t\t}\n\t\t\t}); */\n\n\t\treturn [...result]; // Result is an array, or just return the set\n\t};\n\n\tconst observerCallback = (mutationsList) => {\n\t\tconst result = filterSelector(triggers, mutationsList);\n\t\tresult.forEach((element) => {\n\t\t\tcallback(element);\n\t\t});\n\t};\n\n\tconst config = {\n\t\tchildList: true,\n\t\tattributes: false,\n\t\tcharacterData: false,\n\t\tsubtree: true\n\t};\n\tconst observer = new MutationObserver(observerCallback);\n\tobserver.observe(document.documentElement, config);\n\t//observer.disconnect();\n}\n"],"names":["gsap","Flip","Draggable","AnimationFlip","element","options","this","defaults","triggers","DOM","html","document","documentElement","body","deepmerge","updateEvents","bind","init","initEvents","initObserver","querySelectorAll","forEach","defaultAnimation","target","item","flipFrom","querySelector","flipTo","flipItem","flipTrigger","addEventListener","state","classList","toggle","parentElement","appendChild","duration","scale","absolute","ease","callback","MutationObserver","mutationsList","selector","result","Set","addedNodes","node","nodeType","matches","add","entry","filterSelector","observe","childList","attributes","characterData","subtree"],"sourceRoot":""}
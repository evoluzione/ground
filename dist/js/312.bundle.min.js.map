{"version":3,"file":"312.bundle.min.js","mappings":"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","sources":["webpack://ground/./node_modules/deepmerge/dist/cjs.js","webpack://ground/./node_modules/photoswipe/dist/photoswipe-lightbox.esm.js"],"sourcesContent":["'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","/*!\r\n  * PhotoSwipe Lightbox 5.2.8 - https://photoswipe.com\r\n  * (c) 2022 Dmytro Semenov\r\n  */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport { PhotoSwipeLightbox as default };\r\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\r\n"],"names":["isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","val","Array","isArray","defaultArrayMerge","target","source","concat","map","element","getKeys","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","arrayMerge","sourceIsArray","destination","forEach","key","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","mergeObject","all","array","Error","reduce","prev","next","deepmerge_1","module","exports","createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","from","selector","querySelectorAll","PhotoSwipeEvent","constructor","type","details","this","assign","preventDefault","defaultPrevented","Placeholder","imageSrc","container","decoding","alt","src","setAttribute","setDisplayedSize","transformOrigin","transform","x","y","scale","propValue","undefined","toTransformString","destroy","parentNode","remove","Content","itemData","instance","index","data","Number","isAttached","hasSlide","state","dispatch","content","removePlaceholder","placeholder","keepPlaceholder","setTimeout","load","isLazy","reload","slide","usePlaceholder","placeholderSrc","applyFilters","msrc","isFirstSlide","isImageContent","loadImage","innerHTML","html","updateContentSize","imageElement","srcset","complete","onLoaded","onload","onerror","onError","setSlide","pswp","isActive","heavyAppended","append","displayError","isError","isLoading","image","dataset","largestUsedSize","parseInt","sizes","String","isZoomable","lazyLoad","errorMsgEl","innerText","errorMsg","isDecoding","requestAnimationFrame","decode","then","appendImage","catch","activate","deactivate","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","ZoomLevel","update","maxWidth","maxHeight","panAreaSize","elementSize","hRatio","vRatio","fit","Math","min","fill","vFill","initial","_getInitial","secondary","_getSecondary","max","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","PhotoSwipeLightbox","_listeners","_filters","addFilter","name","fn","priority","push","sort","f1","f2","removeFilter","args","apply","on","off","listener","event","getNumItems","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","createContentFromData","getItemData","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","super","_uid","init","onThumbnailsClick","bind","gallerySelector","addEventListener","e","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","window","navigator","onLine","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","loadAndOpen","getClickedIndexFn","clickedTarget","clickedChildIndex","findIndex","child","contains","initialPointerPos","shouldOpen","preload","promiseArray","pswpModuleType","pswpModule","goTo","Promise","resolve","openPromise","preloadFirstSlide","_preloadedContent","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","getViewportSize","getPanAreaSize","zoomLevel","ceil","lazyLoadData","lazyLoadSlide","uid","iterableModules","mainModule","_openPhotoswipe","default","contentLoader","addToCache","removeEventListener"],"sourceRoot":""}
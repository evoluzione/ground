{"version":3,"file":"animationComparison.bundle.js","mappings":"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","sources":["webpack://ground/./js/animations/animationComparison.js","webpack://ground/./js/animations/animationDefault.js","webpack://ground/./node_modules/deepmerge/dist/cjs.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport AnimationDefault from './animationDefault';\nimport deepmerge from 'deepmerge';\nimport { initObserver } from '../utilities/observer';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationComparison extends AnimationDefault {\n\n\tconstructor(element, options) {\n\t\tsuper(element, options);\n\t\tthis.element = element || '[data-scroll=\"js-comparison\"]';;\n\t}\n\n\tfireAnimation(item) {\n\t\tconst target = item.querySelector('[data-scroll-target]');\n\t\tconst targetMedia = item.querySelectorAll('[data-scroll-target-media]');\n\t\tconst targetImage = item.querySelectorAll('[data-scroll-target-media] img');\n\t\tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t\tconst tl = gsap.timeline({\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: target,\n\t\t\t\tstart: 'center center',\n\t\t\t\tend: () => `+=${target.offsetWidth}`,\n\t\t\t\tscrub: targetScrub || false,\n\t\t\t\tpin: true\n\t\t\t},\n\t\t\tdefaults: { ease: 'none' }\n\t\t});\n\n\t\ttl.fromTo(targetMedia, { xPercent: 100, x: 0 }, { xPercent: 0 }).fromTo(\n\t\t\ttargetImage,\n\t\t\t{ xPercent: -100, x: 0 },\n\t\t\t{ xPercent: 0 },\n\t\t\t0\n\t\t);\n\t}\n}\n","/* eslint-disable no-unused-vars */\n// import { initObserver } from '../utilities/observer';\n// import { getTemplateUrl } from '../utilities/paths';\nimport deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class AnimationDefault {\n\t/**\n\t * @param {string} element - Selector\n\t * @param {Object} options - User options\n\t */\n\tconstructor(element, options) {\n\t\tthis.element = element;\n\t\tthis.defaults = {\n\t\t\ttriggers: this.element\n\t\t};\n\t\tthis.DOM = {\n\t\t\thtml: document.documentElement,\n\t\t\tbody: document.body\n\t\t};\n\t\tthis.options = options ? deepmerge(this.defaults, options) : this.defaults;\n\t\t// this.updateEvents = this.updateEvents.bind(this);\n\n\t\t// window.addEventListener('DOMContentLoaded', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollStart', () => {});\n\n\t\t// ScrollTrigger.addEventListener('scrollEnd', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refreshInit', () => {});\n\n\t\t// ScrollTrigger.addEventListener('refresh', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_OUT', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('resize', () => {\n\t\t// \t// ScrollTrigger.update();\n\t\t// \t// ScrollTrigger.refresh();\n\t\t// });\n\n\t\t// window.addEventListener('NAVIGATE_IN', () => {});\n\n\t\t// window.addEventListener('NAVIGATE_END', () => {});\n\n\t\t//  window.addEventListener('LOADER_COMPLETE', () => {\n\t\tthis.init();\n\t\tthis.initEvents(this.options.triggers);\n\t\t// initObserver(this.options.triggers, this.updateEvents);\n\t\t//  });\t\t\n\t}\n\n\t/**\n\t * Init\n\t */\n\tinit() {\n\t\tthis.DOM.element = this.element;\n\t}\n\n\t/**\n\t * Initialize events\n\t * @param {string} triggers - Selectors\n\t */\n\tinitEvents(triggers) {\n\t\tthis.fireAnimation(triggers);\n\n\t\t// gsap.utils.toArray(triggers).forEach((element) => {\n\t\t// \tif (element.dataset.scroll === 'js-split-text') {\n\t\t// \t}  else {\n\t\t// \t\tthis.animationDefault(target);\n\t\t// \t}\n\t\t// });\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\t\t\tthis.fireAnimation(target);\n\t\t}, 1000);\n\t}\n\n\t/**\n\t * Fire the animation\n\t * @param {node} item \n\t */\n\tfireAnimation(item) {\n\n\t\tconst targetClass = item.dataset.scroll;\n\n\t\tScrollTrigger.create({\n\t\t\ttrigger: item,\n\t\t\tstart: 'top 100%',\n\t\t\ttoggleClass: targetClass,\n\t\t\ttoggleActions: 'play none none none'\n\t\t\t// markers: true,\n\t\t\t// once: true,\n\t\t});\n\t}\n}\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n"],"names":["gsap","ScrollTrigger","AnimationComparison","element","options","item","target","querySelector","targetMedia","querySelectorAll","targetImage","targetScrub","parseInt","dataset","scrollScrub","scrollTrigger","trigger","start","end","offsetWidth","scrub","pin","defaults","ease","fromTo","xPercent","x","AnimationDefault","this","triggers","DOM","html","document","documentElement","body","deepmerge","init","initEvents","fireAnimation","setTimeout","targetClass","scroll","toggleClass","toggleActions","isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","clone","val","Array","isArray","defaultArrayMerge","source","concat","map","getKeys","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","arrayMerge","sourceIsArray","destination","forEach","key","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","mergeObject","all","array","Error","reduce","prev","next","deepmerge_1","module","exports"],"sourceRoot":""}
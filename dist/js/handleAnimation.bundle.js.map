{"version":3,"file":"handleAnimation.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;CAEA;;CAEA;AAEA;AAEA;;IAEqBE;AAUpB,6BAAc;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,iDAJQ,EAIR;;AAAA,yCAHA,EAGA;;AAAA,6CAFI,KAEJ;;AACb,SAAKC,UAAL,CAAgB,eAAhB;AACAH,IAAAA,iEAAY,CAAC,eAAD,EAAkB,KAAKI,YAAvB,CAAZ;AACA;;;;WAED,oBAAWC,QAAX,EAAqB;AAEpB,WAAKC,sBAAL,CAA4BD,QAA5B;AAEA,WAAKE,mBAAL;AAEA,WAAKC,iBAAL,CAAuBH,QAAvB;AAEA,MAED;;;;WACA,gCAAuBA,QAAvB,EAAiC;AAAA;;AAEhCJ,MAAAA,oDAAA,CAAmBI,QAAnB,EAA6BM,OAA7B,CAAqC,UAACC,OAAD,EAAa;AACjD,YAAMC,aAAa,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAtC;;AAEA,YAAMC,SAAS,GAAG,KAAI,CAACC,mBAAL,CAAyBC,QAAzB,CAAkCL,aAAlC,CAAlB;;AACA,YAAIG,SAAJ,EAAe;;AAEf,YAAG,CAAC,KAAI,CAACG,eAAN,IAAyBN,aAAa,CAACO,SAAd,CAAwB,CAAxB,EAA0B,CAA1B,MAAiC,IAA7D,EAAkE;AACjE,eAAI,CAACD,eAAL,GAAuB,IAAvB;AACA;;AAED,aAAI,CAACF,mBAAL,CAAyBI,IAAzB,CAA8BR,aAA9B;AACA,OAXD,EAFgC,CAehC;AACA;AAEA,MAED;;;;WACA,+BAAsB;AAAA;;AAErB,UAAI,KAAKI,mBAAL,CAAyBC,QAAzB,CAAkC,eAAlC,CAAJ,EAAwD;AACvD,YAAMI,OAAO,GAAG,iYACdC,IADc,CACT,UAACC,MAAD,EAAY;AACjB,gBAAI,CAACC,kBAAL,GAA0BD,MAAM,CAACE,OAAjC;AACA,iBAAO,IAAP;AACA,SAJc,EAKdC,KALc,CAKR,UAACC,KAAD;AAAA,iBAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,SALQ,CAAhB;AAOA,aAAKG,WAAL,CAAiBV,IAAjB,CAAsBC,OAAtB;AACA;;AAED,UAAI,KAAKL,mBAAL,CAAyBC,QAAzB,CAAkC,aAAlC,CAAJ,EAAsD;AACrD,YAAMI,QAAO,GAAG,4TACdC,IADc,CACT,UAACC,MAAD,EAAY;AACjB,gBAAI,CAACQ,iBAAL,GAAyBR,MAAM,CAACE,OAAhC;AACA,iBAAO,IAAP;AACA,SAJc,EAKdC,KALc,CAKR,UAACC,KAAD;AAAA,iBAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,SALQ,CAAhB;;AAOA,aAAKG,WAAL,CAAiBV,IAAjB,CAAsBC,QAAtB;AACA;;AAED,UAAI,KAAKH,eAAT,EAA0B;AACzB,YAAMG,SAAO,GAAG,wTACdC,IADc,CACT,UAACC,MAAD,EAAY;AACjB,gBAAI,CAACS,gBAAL,GAAwBT,MAAM,CAACE,OAA/B;AACA,iBAAO,IAAP;AACA,SAJc,EAKdC,KALc,CAKR,UAACC,KAAD;AAAA,iBAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,SALQ,CAAhB;;AAOA,aAAKG,WAAL,CAAiBV,IAAjB,CAAsBC,SAAtB;AACA;AACD;;;WAED,2BAAkBjB,QAAlB,EAA4B;AAAA;;AAC3B;AACA6B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,WAAjB,EAA8BR,IAA9B,CAAmC,UAAAa,GAAG,EAAI;AACzCP,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;;AACA,cAAI,CAACC,kBAAL,CAAwBhC,QAAxB;AACA,OAHD;AAKA;;;WAED,4BAAmBA,QAAnB,EAA6B;AAAA;;AAC5BJ,MAAAA,oDAAA,CAAmBI,QAAnB,EAA6BM,OAA7B,CAAqC,UAACC,OAAD,EAAa;AACjD,cAAI,CAAC0B,aAAL,CAAmB1B,OAAnB;AACA,OAFD;AAGA;;;WAED,uBAAcA,OAAd,EAAuB;AAEtB,cAAQA,OAAO,CAACE,OAAR,CAAgBC,MAAxB;AAEC,aAAK,eAAL;AACC,cAAI,KAAKU,kBAAT,CAA4Bb,OAA5B;AACA;;AAED,aAAK,aAAL;AACC,cAAI,KAAKoB,iBAAT,CAA2BpB,OAA3B;AACA;AAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACC,cAAI,KAAKqB,gBAAT,CAA0BrB,OAA1B;AACA;AA5DF;AA+DA;AAED;AACD;AACA;AACA;;;;WACC,sBAAa2B,MAAb,EAAqB;AAAA;;AACpB,WAAKC,IAAL;AACAC,MAAAA,UAAU,CAAC,YAAM;AAEhB,cAAI,CAACH,aAAL,CAAmBC,MAAnB;AAEA,OAJS,EAIP,IAJO,CAAV;AAKA,MAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/oBD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASvC,YAAT,CAAsBK,QAAtB,EAAgCqC,QAAhC,EAA0C;AAChD,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,aAAX,EAA6B;AACnD;AACA,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf,CAFmD,CAGnD;;AAHmD,+CAItBF,aAJsB;AAAA;;AAAA;AAInD,0DAA4C;AAAA,YAA/BG,UAA+B,eAA/BA,UAA+B;;AAAA,oDACxBA,UADwB;AAAA;;AAAA;AAC3C,iEAA+B;AAAA,gBAApBC,IAAoB;;AAC9B;AAEA;AACA,gBAAIA,IAAI,CAACC,QAAL,KAAkB,CAAtB,EAAyB;AACxB;AACA,kBAAID,IAAI,CAACE,OAAL,CAAaP,QAAb,CAAJ,EAA4B;AAC3BE,gBAAAA,MAAM,CAACM,GAAP,CAAWH,IAAX;AACA,eAJuB,CAKxB;;;AALwB,0DAMJA,IAAI,CAACI,gBAAL,CAAsBT,QAAtB,CANI;AAAA;;AAAA;AAMxB,uEAAqD;AAAA,sBAA1CU,KAA0C;AACpDR,kBAAAA,MAAM,CAACM,GAAP,CAAWE,KAAX;AACA;AARuB;AAAA;AAAA;AAAA;AAAA;AASxB;AACD;AAf0C;AAAA;AAAA;AAAA;AAAA;AAgB3C;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9BqD;AAAA;AAAA;AAAA;AAAA;;AAgCnD,8BAAWR,MAAX,EAhCmD,CAgC/B;AACpB,GAjCD;;AAmCA,MAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,aAAD,EAAmB;AAC3C,QAAMC,MAAM,GAAGH,cAAc,CAACtC,QAAD,EAAWwC,aAAX,CAA7B;AACAC,IAAAA,MAAM,CAACnC,OAAP,CAAe,UAACC,OAAD,EAAa;AAC3B8B,MAAAA,QAAQ,CAAC9B,OAAD,CAAR;AACA,KAFD;AAGA,GALD;;AAOA,MAAM4C,MAAM,GAAG;AACdC,IAAAA,SAAS,EAAE,IADG;AAEdC,IAAAA,UAAU,EAAE,KAFE;AAGdC,IAAAA,aAAa,EAAE,KAHD;AAIdC,IAAAA,OAAO,EAAE;AAJK,GAAf;AAMA,MAAMC,QAAQ,GAAG,IAAIC,gBAAJ,CAAqBP,gBAArB,CAAjB;AACAM,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,QAAQ,CAACC,eAA1B,EAA2CT,MAA3C,EAlDgD,CAmDhD;AACA","sources":["webpack://ground/./js/animations/handleAnimation.js","webpack://ground/./js/utilities/observer.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { initObserver } from '../utilities/observer';\n// import deepmerge from 'deepmerge';\nimport { gsap } from 'gsap';\n// import { MorphSVGPlugin, DrawSVGPlugin, SplitText, ScrollTrigger } from 'gsap/all';\n\n// import AnimationSplitText from './animationSplitText';\n\n// gsap.registerPlugin(ScrollTrigger, SplitText, DrawSVGPlugin, MorphSVGPlugin);\n\nexport default class HandleAnimation {\n\n\tAnimationSplitText;\n\tAnimationRotation;\n\tAnimationDefault;\n\n\tanimationToActivate = [];\n\tpromiseList = [];\n\thasCssAnimation = false;\n\n\tconstructor() {\n\t\tthis.initEvents('[data-scroll]');\n\t\tinitObserver('[data-scroll]', this.updateEvents);\n\t}\n\n\tinitEvents(triggers) {\n\n\t\tthis.getAnimationToActivate(triggers);\n\n\t\tthis.populatePromiseList();\n\n\t\tthis.resolveAllPromise(triggers);\n\n\t}\n\n\t// get all animations we need\n\tgetAnimationToActivate(triggers) {\n\n\t\tgsap.utils.toArray(triggers).forEach((element) => {\n\t\t\tconst dataAttribute = element.dataset.scroll;\n\n\t\t\tconst isInArray = this.animationToActivate.includes(dataAttribute);\n\t\t\tif (isInArray) return;\n\n\t\t\tif(!this.hasCssAnimation && dataAttribute.substring(0,2) !== 'js'){\n\t\t\t\tthis.hasCssAnimation = true;\n\t\t\t}\n\n\t\t\tthis.animationToActivate.push(dataAttribute);\n\t\t});\n\n\t\t// console.log(this.animationToActivate);\n\t\t// console.log(this.hasCssAnimation);\n\n\t}\n\n\t// Create an array of promises to import partials\n\tpopulatePromiseList() {\n\n\t\tif (this.animationToActivate.includes('js-split-text')) {\n\t\t\tconst promise = import(/* webpackChunkName: \"animationSplitText\" */'./animationSplitText')\n\t\t\t\t.then((module) => {\n\t\t\t\t\tthis.AnimationSplitText = module.default;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t\t.catch((error) => console.log(error));\n\n\t\t\tthis.promiseList.push(promise)\n\t\t}\n\n\t\tif (this.animationToActivate.includes('js-rotation')) {\n\t\t\tconst promise = import(/* webpackChunkName: \"animationRotation\" */'./animationRotation')\n\t\t\t\t.then((module) => {\n\t\t\t\t\tthis.AnimationRotation = module.default;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t\t.catch((error) => console.log(error));\n\n\t\t\tthis.promiseList.push(promise)\n\t\t}\n\n\t\tif (this.hasCssAnimation) {\n\t\t\tconst promise = import(/* webpackChunkName: \"animationDefault\" */'./animationDefault')\n\t\t\t\t.then((module) => {\n\t\t\t\t\tthis.AnimationDefault = module.default;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t\t.catch((error) => console.log(error));\n\n\t\t\tthis.promiseList.push(promise)\n\t\t}\n\t}\n\n\tresolveAllPromise(triggers) {\n\t\t// Once all promises are resolved\n\t\tPromise.all(this.promiseList).then(res => {\n\t\t\tconsole.log(res);\n\t\t\tthis.activateAnimations(triggers)\n\t\t});\n\n\t}\n\n\tactivateAnimations(triggers) {\n\t\tgsap.utils.toArray(triggers).forEach((element) => {\n\t\t\tthis.fireAnimation(element);\n\t\t});\n\t}\n\n\tfireAnimation(element) {\n\n\t\tswitch (element.dataset.scroll) {\n\n\t\t\tcase 'js-split-text':\n\t\t\t\tnew this.AnimationSplitText(element);\n\t\t\t\tbreak;\n\n\t\t\tcase 'js-rotation':\n\t\t\t\tnew this.AnimationRotation(element);\n\t\t\t\tbreak;\n\n\t\t\t// case 'js-batch':\n\t\t\t// \tthis.animationBatch(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-scale':\n\t\t\t// \tthis.animationScale(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-draw':\n\t\t\t// \tthis.animationDraw(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-bg-color':\n\t\t\t// \tthis.animationChangeBgColor(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-pin':\n\t\t\t// \tthis.animationPin(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-sprite-image':\n\t\t\t// \tthis.animationSpriteImages(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-horizontal-scrol':\n\t\t\t// \tthis.animationHorizontalScroll(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-horizontal-scroll-container':\n\t\t\t// \tthis.animationHorizontalScrollContainer(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-horizontal-scroll-section':\n\t\t\t// \tthis.animationHorizontalScrollSection(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-comparison':\n\t\t\t// \tthis.animationComparison(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-parallax':\n\t\t\t// \tthis.animationParallax(element);\n\t\t\t// \tbreak;\n\n\t\t\t// case 'js-video':\n\t\t\t// \tthis.animationVideo(element);\n\t\t\t// \tbreak;\n\n\t\t\tdefault:\n\t\t\t\tnew this.AnimationDefault(element);\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\t/**\n\t * Update events\n\t * @param {Object} target - New selector\n\t */\n\tupdateEvents(target) {\n\t\tthis.init();\n\t\tsetTimeout(() => {\n\n\t\t\tthis.fireAnimation(target);\n\n\t\t}, 1000);\n\t}\n\n\t// /**\n\t//  * default Animation\n\t//  */\n\t// animationDefault(item) {\n\t// \tconst targetClass = item.dataset.scroll;\n\n\t// \tScrollTrigger.create({\n\t// \t\ttrigger: item,\n\t// \t\tstart: 'top 100%',\n\t// \t\ttoggleClass: targetClass,\n\t// \t\ttoggleActions: 'play none none none'\n\t// \t\t// markers: true,\n\t// \t\t// once: true,\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * splitText Animation\n\t//  */\n\t// animationSplitText(item) {\n\t// \tgsap.set(item, { autoAlpha: 1 });\n\t// \tconst targetSplitBy = item.dataset.scrollSplittext;\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tstart: 'top 90%',\n\t// \t\t\tend: 'bottom 60%',\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\t// markers: true,\n\t// \t\t\ttoggleActions: 'play none play reset'\n\t// \t\t}\n\t// \t});\n\n\t// \tif (targetSplitBy === 'chars') {\n\t// \t\tconst itemSplitted = new SplitText(item, { type: 'chars' });\n\t// \t\ttl.from(itemSplitted.chars, {\n\t// \t\t\tyPercent: 100,\n\t// \t\t\topacity: 0,\n\t// \t\t\tstagger: 0.05,\n\t// \t\t\tduration: 0.5,\n\t// \t\t\tease: 'back.inOut'\n\t// \t\t});\n\t// \t}\n\n\t// \tif (targetSplitBy === 'words') {\n\t// \t\tconst itemSplitted = new SplitText(item, { type: 'words' });\n\t// \t\ttl.from(itemSplitted.words, {\n\t// \t\t\tyPercent: 100,\n\t// \t\t\topacity: 0,\n\t// \t\t\tstagger: 0.05,\n\t// \t\t\tduration: 0.5,\n\t// \t\t\tease: 'back.inOut'\n\t// \t\t});\n\t// \t}\n\n\t// \tif (targetSplitBy === 'lines') {\n\t// \t\tconst itemSplitted = new SplitText(item, { type: 'lines' });\n\t// \t\ttl.from(itemSplitted.lines, { y: 20, opacity: 0, stagger: 0.01, duration: 0.01, ease: 'back.inOut' });\n\t// \t}\n\t// }\n\n\t// /**\n\t//  * rotation Animation\n\t//  */\n\t// animationRotation(item) {\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tstart: 'top 90%',\n\t// \t\t\tend: 'bottom 80%',\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\ttoggleActions: 'play none play reverse'\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.from(item, {\n\t// \t\tx: 400,\n\t// \t\trotation: 360\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * batch Animation\n\t//  */\n\t// animationBatch(item) {\n\t// \tconst target = item.querySelectorAll('[data-scroll-target]');\n\n\t// \t// gsap.set(target, { y: 100, opacity: 0 });\n\n\t// \tScrollTrigger.batch(target, {\n\t// \t\tinterval: 0.1, // time window (in seconds) for batching to occur.\n\t// \t\tbatchMax: 3, // maximum batch size (targets)\n\t// \t\tonEnter: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t// \t\tonLeave: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true }),\n\t// \t\tonEnterBack: (batch) => gsap.to(batch, { autoAlpha: 1, stagger: 0.1, overwrite: true }),\n\t// \t\tonLeaveBack: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true })\n\t// \t});\n\n\t// \t// ScrollTrigger.addEventListener('refreshInit', () =>\n\t// \t// \tgsap.set(target, { y: 0 })\n\t// \t// )\n\t// }\n\n\t// /**\n\t//  * scale Animation\n\t//  */\n\t// animationScale(item) {\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tstart: 'top 100%',\n\t// \t\t\tend: 'bottom 0%',\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\ttoggleActions: 'play none play reverse'\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.to(item, {\n\t// \t\tscale: 1.5\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * parallax Animation\n\t//  */\n\t// animationParallax(item) {\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\ttoggleActions: 'play pause none none',\n\t// \t\t\tscrub: targetScrub || 2\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.to(item, {\n\t// \t\ty: -item.dataset.scrollSpeedY * 100 || 0,\n\t// \t\tx: -item.dataset.scrollSpeedX * 100 || 0\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * video Animation\n\t//  */\n\t// animationVideo(item) {\n\t// \tconst targetVideo = item.querySelector('[data-scroll-target]');\n\n\t// \tgsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tstart: 'top bottom',\n\t// \t\t\tend: 'bottom top',\n\t// \t\t\tmarkers: false,\n\t// \t\t\tonEnter: () => targetVideo.play(),\n\t// \t\t\tonLeave: () => {\n\t// \t\t\t\ttargetVideo.pause();\n\t// \t\t\t\ttargetVideo.currentTime = 0;\n\t// \t\t\t},\n\t// \t\t\tonEnterBack: () => targetVideo.play(),\n\t// \t\t\tonLeaveBack: () => {\n\t// \t\t\t\ttargetVideo.pause();\n\t// \t\t\t\ttargetVideo.currentTime = 0;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * darwSvg Animation\n\t//  */\n\t// animationDraw(item) {\n\t// \tconst target = item.querySelectorAll('path');\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\ttoggleActions: 'play none none none'\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.from(target, {\n\t// \t\tdrawSVG: 0\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * backgroundColor Animation\n\t//  */\n\t// animationChangeBgColor(item) {\n\t// \tconst target = document.body;\n\t// \tconst targetColor = item.dataset.scrollBgcolor;\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: item,\n\t// \t\t\tscrub: 1,\n\t// \t\t\ttoggleActions: 'play reset play reset'\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.to(target, {\n\t// \t\tbackgroundColor: targetColor,\n\t// \t\tease: 'power1'\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * pin Animation\n\t//  */\n\t// animationPin(item) {\n\t// \tconst target = item.querySelectorAll('[data-scroll-target]');\n\t// \tconst targetElement = item.querySelectorAll('[data-scroll-target-animate]');\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tstart: 'center center',\n\t// \t\t\t// end: '+=200%',\n\t// \t\t\t// toggleClass: 'active',\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\tpin: true,\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.from(targetElement, {\n\t// \t\tscale: 0.6,\n\t// \t\ttransformOrigin: 'center center'\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * pin Image Sequence https://codepen.io/GreenSock/pen/yLOVJxd\n\t//  */\n\t// animationSpriteImages(item) {\n\t// \tconst target = item.querySelector('[data-scroll-target]');\n\t// \tconst canvas = item.querySelector('[data-scroll-canvas]');\n\t// \tconst targetContainer = item.querySelector('[data-scroll-target-animate]');\n\t// \tconst context = canvas.getContext('2d');\n\t// \tconst frameCount = parseInt(item.dataset.scrollFrames, 10);\n\t// \tconst framePath = item.dataset.scrollPath;\n\n\t// \tcanvas.width = 900;\n\t// \tcanvas.height = 859;\n\n\t// \tconst currentFrame = (index) => `${framePath}/${(index + 1).toString().padStart(4, '0')}.jpg`;\n\t// \t// `https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/01-hero-lightpass/${(index + 1).toString().padStart(4, '0')}.jpg`\n\n\t// \tconst images = [];\n\t// \tconst frames = {\n\t// \t\tframe: 0\n\t// \t};\n\n\t// \tfor (let i = 0; i < frameCount; i++) {\n\t// \t\tconst img = new Image();\n\t// \t\timg.src = currentFrame(i);\n\t// \t\timages.push(img);\n\t// \t}\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tstart: 'center center',\n\t// \t\t\tend: '+=400%',\n\t// \t\t\tscrub: 0.5,\n\t// \t\t\tpin: true,\n\t// \t\t}\n\t// \t});\n\n\t// \ttl.to(\n\t// \t\tframes,\n\t// \t\t{\n\t// \t\t\tframe: frameCount - 1,\n\t// \t\t\tsnap: 'frame',\n\t// \t\t\tonUpdate: render,\n\t// \t\t\tduration: 20\n\t// \t\t},\n\t// \t\t'together'\n\t// \t).fromTo(targetContainer, { scale: 0.95 }, { scale: 1, duration: 20 }, 'together');\n\n\t// \timages[0].onload = render;\n\n\t// \tfunction render() {\n\t// \t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t// \t\tcontext.drawImage(images[frames.frame], 0, 0);\n\t// \t}\n\t// }\n\n\t// /**\n\t//  * pin Horizontal Animation\n\t//  */\n\t// animationHorizontalScroll(item) {\n\t// \tconst target = item.querySelector('[data-scroll-target]');\n\t// \tconst targetContainer = item.querySelector('[data-scroll-target-animate]');\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tgsap.to(targetContainer, {\n\t// \t\tx: () => -targetContainer.getBoundingClientRect().width + target.getBoundingClientRect().width,\n\t// \t\tease: 'none',\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tinvalidateOnRefresh: true,\n\t// \t\t\tstart: 'center center',\n\t// \t\t\tend: () => '+=' + targetContainer.offsetWidth,\n\t// \t\t\tpin: true,\n\t// \t\t\tscrub: targetScrub || false\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * pin Horizontal Container Animation\n\t//  */\n\t// animationHorizontalScrollContainer(item) {\n\t// \tconst target = item.querySelector('[data-scroll-target]');\n\t// \tconst panel = item.querySelectorAll('[data-scroll-panel]');\n\t// \tconst targetScrub = item.dataset.scrollScrub;\n\n\t// \tlet sections = gsap.utils.toArray(panel);\n\n\t// \tlet scrollTween = gsap.to(sections, {\n\t// \t\txPercent: -100 * (sections.length - 1),\n\t// \t\tease: 'none', // <-- IMPORTANT!\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tpin: true,\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\t//snap: directionalSnap(1 / (sections.length - 1)),\n\t// \t\t\tend: '+=3000'\n\t// \t\t}\n\t// \t});\n\n\t// \tgsap.to('.js-box-1', {\n\t// \t\ty: -130,\n\t// \t\tduration: 2,\n\t// \t\tease: 'elastic',\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: '.js-box-1',\n\t// \t\t\tcontainerAnimation: scrollTween,\n\t// \t\t\tstart: 'left center',\n\t// \t\t\ttoggleActions: 'play none play reverse'\n\t// \t\t\t// markers: true,\n\t// \t\t}\n\t// \t});\n\n\t// \tgsap.to('.js-box-2', {\n\t// \t\ty: 320,\n\t// \t\tbackgroundColor: 'red',\n\t// \t\tease: 'none',\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: '.js-box-2',\n\t// \t\t\tcontainerAnimation: scrollTween,\n\t// \t\t\tstart: 'center 80%',\n\t// \t\t\tend: 'center 20%',\n\t// \t\t\tscrub: 2\n\t// \t\t\t// markers: true\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// /**\n\t//  * pin Horizontal Section Animation\n\t//  */\n\t// animationHorizontalScrollSection(item) {\n\t// \tconst target = item.querySelector('[data-scroll-target]');\n\t// \tconst section = item.querySelectorAll('[data-scroll-section]');\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst sections = gsap.utils.toArray(section);\n\n\t// \tlet maxWidth = 0;\n\n\t// \tconst getMaxWidth = () => {\n\t// \t\tmaxWidth = 0;\n\t// \t\tsections.forEach((section) => {\n\t// \t\t\tmaxWidth += section.offsetWidth;\n\t// \t\t});\n\t// \t};\n\t// \tgetMaxWidth();\n\t// \tScrollTrigger.addEventListener('refreshInit', getMaxWidth);\n\n\t// \tgsap.to(sections, {\n\t// \t\tx: () => `-${maxWidth - window.innerWidth}`,\n\t// \t\tease: 'none',\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tpin: true,\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\tstart: 'center center',\n\t// \t\t\tend: () => `+=${maxWidth}`,\n\t// \t\t\tinvalidateOnRefresh: true\n\t// \t\t}\n\t// \t});\n\n\t// \t// ADD SKEW\n\t// \t// let proxy = { skew: 0 },\n\t// \t// \tskewSetter = gsap.quickSetter(section, 'skewX', 'deg'), // fast\n\t// \t// \tclamp = gsap.utils.clamp(-10, 10) // don't let the skew go beyond [X] degrees.\n\t// \t// END SKEW\n\n\t// \tsections.forEach((sct, i) => {\n\t// \t\tScrollTrigger.create({\n\t// \t\t\ttrigger: sct,\n\t// \t\t\tstart: () =>\n\t// \t\t\t\t'top top-=' +\n\t// \t\t\t\t(sct.offsetLeft - window.innerWidth / 2) * (maxWidth / (maxWidth - window.innerWidth)),\n\t// \t\t\tend: () => '+=' + sct.offsetWidth * (maxWidth / (maxWidth - window.innerWidth)),\n\t// \t\t\ttoggleClass: { targets: sct, className: 'active' }\n\t// \t\t\t// ADD SKEW\n\t// \t\t\t// onUpdate: (self) => {\n\t// \t\t\t// \tlet skew = clamp(self.getVelocity() / -500)\n\t// \t\t\t// \t// only do something if the skew is MORE severe. Remember, we're always tweening back to 0, so if the user slows their scrolling quickly, it's more natural to just let the tween handle that smoothly rather than jumping to the smaller skew.\n\t// \t\t\t// \tif (Math.abs(skew) > Math.abs(proxy.skew)) {\n\t// \t\t\t// \t\tproxy.skew = skew\n\t// \t\t\t// \t\tgsap.to(proxy, {\n\t// \t\t\t// \t\t\tskew: 0,\n\t// \t\t\t// \t\t\tduration: 0.5,\n\t// \t\t\t// \t\t\tease: 'circ',\n\t// \t\t\t// \t\t\toverwrite: true,\n\t// \t\t\t// \t\t\tonUpdate: () => skewSetter(proxy.skew),\n\t// \t\t\t// \t\t})\n\t// \t\t\t// \t}\n\t// \t\t\t// },\n\t// \t\t\t// END SKEW\n\t// \t\t});\n\t// \t});\n\n\t// \t// SKEW: make the right edge \"stick\" to the scroll bar. force3D: true improves performance\n\t// \t// gsap.set(section, { transformOrigin: 'center center', force3D: true })\n\t// \t// END SKEW\n\t// }\n\n\t// /**\n\t//  * comparison Animation\n\t//  */\n\t// animationComparison(item) {\n\t// \tconst target = item.querySelector('[data-scroll-target]');\n\t// \tconst targetMedia = item.querySelectorAll('[data-scroll-target-media]');\n\t// \tconst targetImage = item.querySelectorAll('[data-scroll-target-media] img');\n\t// \tconst targetScrub = parseInt(item.dataset.scrollScrub, 10);\n\n\t// \tconst tl = gsap.timeline({\n\t// \t\tscrollTrigger: {\n\t// \t\t\ttrigger: target,\n\t// \t\t\tstart: 'center center',\n\t// \t\t\tend: () => `+=${target.offsetWidth}`,\n\t// \t\t\tscrub: targetScrub || false,\n\t// \t\t\tpin: true,\n\t// \t\t},\n\t// \t\tdefaults: { ease: 'none' }\n\t// \t});\n\n\t// \ttl.fromTo(targetMedia, { xPercent: 100, x: 0 }, { xPercent: 0 }).fromTo(\n\t// \t\ttargetImage,\n\t// \t\t{ xPercent: -100, x: 0 },\n\t// \t\t{ xPercent: 0 },\n\t// \t\t0\n\t// \t);\n\t// }\n\n}\n","/**\n * Observe DOM Node Changes\n * @param {string} triggers - Selectors\n * @param {requestCallback} cb - The callback that handles the response.\n *\n * @see https://stackoverflow.com/questions/56608748/how-to-use-queryselectorall-on-the-added-nodes-in-a-mutationobserver\n */\nexport function initObserver(triggers, callback) {\n\tconst filterSelector = (selector, mutationsList) => {\n\t\t// We can't create a NodeList; let's use a Set\n\t\tconst result = new Set();\n\t\t// Loop through the mutationsList...\n\t\tfor (const { addedNodes } of mutationsList) {\n\t\t\tfor (const node of addedNodes) {\n\t\t\t\t// console.log(node);\n\n\t\t\t\t// If it's an element...\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\t// Add it if it's a match\n\t\t\t\t\tif (node.matches(selector)) {\n\t\t\t\t\t\tresult.add(node);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tfor (const entry of node.querySelectorAll(selector)) {\n\t\t\t\t\t\tresult.add(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* mutationsList.map((e) => e.addedNodes).forEach((n) => {\n\t\t\t\tif (n.nodeType === 1) {\n\t\t\t\t\tif (n.matches(selector)) {\n\t\t\t\t\t\tresult.add(n);\n\t\t\t\t\t}\n\t\t\t\t\t// Add any children\n\t\t\t\t\tn.querySelectorAll(selector).forEach((c) => result.add(c));\n\t\t\t\t}\n\t\t\t}); */\n\n\t\treturn [...result]; // Result is an array, or just return the set\n\t};\n\n\tconst observerCallback = (mutationsList) => {\n\t\tconst result = filterSelector(triggers, mutationsList);\n\t\tresult.forEach((element) => {\n\t\t\tcallback(element);\n\t\t});\n\t};\n\n\tconst config = {\n\t\tchildList: true,\n\t\tattributes: false,\n\t\tcharacterData: false,\n\t\tsubtree: true\n\t};\n\tconst observer = new MutationObserver(observerCallback);\n\tobserver.observe(document.documentElement, config);\n\t//observer.disconnect();\n}\n"],"names":["initObserver","gsap","HandleAnimation","initEvents","updateEvents","triggers","getAnimationToActivate","populatePromiseList","resolveAllPromise","utils","toArray","forEach","element","dataAttribute","dataset","scroll","isInArray","animationToActivate","includes","hasCssAnimation","substring","push","promise","then","module","AnimationSplitText","default","catch","error","console","log","promiseList","AnimationRotation","AnimationDefault","Promise","all","res","activateAnimations","fireAnimation","target","init","setTimeout","callback","filterSelector","selector","mutationsList","result","Set","addedNodes","node","nodeType","matches","add","querySelectorAll","entry","observerCallback","config","childList","attributes","characterData","subtree","observer","MutationObserver","observe","document","documentElement"],"sourceRoot":""}